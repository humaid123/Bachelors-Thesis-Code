

from sympy.polys.polyfuncs import horner
from sympy.abc import x
from sympy import symbols

alpha = symbols("alpha")
beta = symbols("beta")


def d0(x, alpha, beta):
    return ( (8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**9) + (9*alpha**4 - 9*alpha**3*beta + 27*alpha**3 - 12*alpha**2*beta**2 - 51*alpha**2*beta + 10*alpha**2 - 24*alpha*beta**2 - 70*alpha*beta - 20*alpha - 8*beta**2 - 20*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 
+ 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + (-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 94*alpha**3 + 6*alpha**2*beta**3 - 128*alpha**2*beta - 170*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 72*alpha*beta - 120*alpha + 4*beta**3 + 8*beta**2 - 12*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 
+ 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + (9*alpha**4*beta**2 + 18*alpha**4*beta - 9*alpha**4 + 7*alpha**3*beta**3 + 57*alpha**3*beta**2 + 111*alpha**3*beta - 11*alpha**3 + 21*alpha**2*beta**3 + 136*alpha**2*beta**2 + 263*alpha**2*beta + 50*alpha**2 + 18*alpha*beta**3 + 128*alpha*beta**2 + 246*alpha*beta + 84*alpha + 4*beta**3 + 32*beta**2 + 60*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + (36*alpha**4*beta + 36*alpha**4 + 12*alpha**3*beta**2 + 168*alpha**3*beta + 164*alpha**3 - 12*alpha**2*beta**3 + 238*alpha**2*beta + 250*alpha**2 - 24*alpha*beta**3 - 40*alpha*beta**2 + 108*alpha*beta + 144*alpha - 8*beta**3 - 16*beta**2 + 12*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + (-18*alpha**4*beta**2 - 36*alpha**4*beta - 9*alpha**4 - 14*alpha**3*beta**3 - 114*alpha**3*beta**2 - 195*alpha**3*beta - 59*alpha**3 - 42*alpha**2*beta**3 - 236*alpha**2*beta**2 - 373*alpha**2*beta - 130*alpha**2 - 36*alpha*beta**3 - 184*alpha*beta**2 - 282*alpha*beta - 108*alpha - 8*beta**3 - 40*beta**2 - 60*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + (-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 78*alpha**3 + 6*alpha**2*beta**3 - 116*alpha**2*beta - 110*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 48*alpha*beta - 56*alpha + 4*beta**3 + 8*beta**2 - 4*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + (9*alpha**3*beta**2 + 18*alpha**3*beta + 9*alpha**3 + 7*alpha**2*beta**3 + 48*alpha**2*beta**2 + 75*alpha**2*beta + 34*alpha**2 + 14*alpha*beta**3 + 64*alpha*beta**2 + 86*alpha*beta + 36*alpha + 4*beta**3 + 16*beta**2 + 20*beta + 8)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 + alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 
123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 
816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 0*(x) + 0 )
def d1(x, alpha, beta):
    return ( 1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - 2*beta - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (-2*alpha*beta - 2*alpha + beta**2 - 3)/(alpha**8 
+ 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (alpha*beta**2 + 2*alpha*beta - alpha + beta**2 + 6*beta + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (4*alpha*beta + 4*alpha - 2*beta**2 + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (-2*alpha*beta**2 - 4*alpha*beta - alpha - 2*beta**2 - 6*beta - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + (-2*alpha*beta - 2*alpha + beta**2 - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (beta**2 + 2*beta + 1)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 0*(x) + 0 )
def d2(x, alpha, beta):
    return ( (3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**9) + (3*alpha**2*beta + 8*alpha**2 - 3*alpha*beta**2 - 11*alpha*beta - 7*alpha + 2*beta**2 + 5*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**8) + (3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 9*alpha*beta - 12*alpha - 2*beta**3 - 4*beta**2 + 6*beta + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + (-3*alpha**3*beta**2 - 12*alpha**3*beta - 11*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 13*alpha**2*beta - 8*alpha**2 + 7*alpha*beta**2 + 24*alpha*beta + 15*alpha - beta**3 - 8*beta**2 - 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**6) + (3*alpha**3*beta**3 + 18*alpha**3*beta**2 + 30*alpha**3*beta + 8*alpha**3 + 24*alpha**2*beta**2 + 88*alpha**2*beta + 64*alpha**2 - 6*alpha*beta**3 - 28*alpha*beta**2 - 27*alpha*beta + 4*beta**3 + 8*beta**2 - 6*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + (-alpha**3*beta**3 + 12*alpha**3*beta + 14*alpha**3 - 6*alpha**2*beta**3 - 28*alpha**2*beta**2 - 35*alpha**2*beta - 8*alpha**2 - 5*alpha*beta**2 - 15*alpha*beta - 9*alpha + 2*beta**3 + 10*beta**2 + 15*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**4) + (-5*alpha**3*beta**3 - 30*alpha**3*beta**2 - 57*alpha**3*beta - 32*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 15*alpha*beta + 4*alpha - 2*beta**3 - 4*beta**2 + 2*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + (2*alpha**3*beta**3 + 
9*alpha**3*beta**2 + 12*alpha**3*beta + 5*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 19*alpha**2*beta + 8*alpha**2 + alpha*beta**2 + 2*alpha*beta + alpha - beta**3 - 4*beta**2 - 5*beta - 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**2) + 0*(x) + 0 )
def d3(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (2*alpha - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (-2*alpha**2*beta - 3*alpha**2 + 2*alpha*beta**2 + 4*alpha*beta - 2*alpha + beta**2 + 6*beta + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 8*alpha - 2*beta**2 + 3)/(4*alpha**2*beta**2 
+ 16*alpha**2*beta + 16*alpha**2)*(x**5) + (-alpha**2*beta**2 + 2*alpha**2 - 4*alpha*beta**2 - 8*alpha*beta - 2*alpha - 2*beta**2 - 6*beta - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta 
+ 16*alpha**2)*(x**4) + (-alpha**2*beta**2 - 4*alpha**2*beta - 3*alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 0*(x) + 0 ) 
def d4(x, alpha, beta):
    return ( (2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**9) + (4*alpha**2 - 7*alpha*beta + alpha + 4*beta**2 + beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + (2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 6*alpha - 2*beta**3 + 2*beta**2 + 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + (-3*alpha**3*beta - 3*alpha**3 + 4*alpha**2*beta**2 - alpha**2*beta - 13*alpha**2 - 3*alpha*beta**3 - alpha*beta**2 + 12*alpha*beta - 6*alpha - 3*beta**3 - 13*beta**2 - 6*beta - 4)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + (-4*alpha**3 + 16*alpha**2*beta + 4*alpha**2 - 16*alpha*beta**2 + 6*alpha + 4*beta**3 - 4*beta**2 - 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + (alpha**3*beta**3 + 3*alpha**3*beta**2 + 9*alpha**3*beta + 7*alpha**3 + 3*alpha**2*beta**3 + alpha**2*beta**2 
+ 11*alpha**2*beta + 17*alpha**2 + 9*alpha*beta**3 + 11*alpha*beta**2 + 6*alpha*beta + 12*alpha + 7*beta**3 + 17*beta**2 + 12*beta + 6)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + (2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 2*alpha - 2*beta**3 + 2*beta**2 + 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + (-2*alpha**2*beta**2 - 4*alpha**2*beta - 5*alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 6*alpha - 5*beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 0*(x) + 1 )
def d5(x, alpha, beta):
    return ( 1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**9) + (2*alpha - 2*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + (alpha**2 - 4*alpha*beta - 2*alpha + beta**2 - 2*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + (-2*alpha**2*beta - 2*alpha**2 + 2*alpha*beta**2 - 6*alpha + 2*beta**2 + 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + (alpha**2*beta**2 + 2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 + 12*alpha*beta + 6*alpha - beta**2 + 6*beta + 6)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + (4*alpha**2*beta + 4*alpha**2 - 4*alpha*beta**2 + 6*alpha - 4*beta**2 - 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + (-2*alpha**2*beta**2 - 4*alpha**2*beta - alpha**2 - 4*alpha*beta**2 - 12*alpha*beta - 6*alpha - beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + (-2*alpha + 2*beta)/(alpha*beta + alpha + beta + 1)*(x**2) + 1*(x) + 0 )
def d6(x, alpha, beta):
    return ( (-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**9) + (-3*alpha**2*beta + 2*alpha**2 + 3*alpha*beta**2 - 11*alpha*beta + 5*alpha + 8*beta**2 - 7*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**8) + (-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 - 3*alpha*beta**3 + 44*alpha*beta**2 - 9*alpha*beta - 6*alpha - 8*beta**3 + 32*beta**2 + 12*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**7) + (3*alpha**3*beta**2 - alpha**3 - 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 7*alpha**2*beta - 8*alpha**2 - 12*alpha*beta**3 + 13*alpha*beta**2 + 24*alpha*beta - 15*alpha - 11*beta**3 - 8*beta**2 + 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**6) + (-3*alpha**3*beta**3 + 6*alpha**3*beta - 4*alpha**3 - 18*alpha**2*beta**3 - 24*alpha**2*beta**2 + 28*alpha**2*beta - 8*alpha**2 - 30*alpha*beta**3 - 88*alpha*beta**2 + 27*alpha*beta + 6*alpha - 8*beta**3 - 64*beta**2 + 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + (-alpha**3*beta**3 - 6*alpha**3*beta**2 + 2*alpha**3 - 28*alpha**2*beta**2 - 5*alpha**2*beta + 10*alpha**2 + 12*alpha*beta**3 - 35*alpha*beta**2 - 15*alpha*beta + 15*alpha + 14*beta**3 - 8*beta**2 - 9*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**4) + (5*alpha**3*beta**3 - 3*alpha**3*beta + 2*alpha**3 + 30*alpha**2*beta**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 + 57*alpha*beta**3 + 44*alpha*beta**2 - 15*alpha*beta - 2*alpha + 32*beta**3 + 32*beta**2 - 4*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + (2*alpha**3*beta**3 + 3*alpha**3*beta**2 - alpha**3 + 9*alpha**2*beta**3 + 14*alpha**2*beta**2 + alpha**2*beta - 4*alpha**2 + 12*alpha*beta**3 + 19*alpha*beta**2 + 2*alpha*beta - 5*alpha + 5*beta**3 + 8*beta**2 + beta - 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**2) + 0*(x) + 0 )
def d7(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**9) + (2*alpha - 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + (alpha**2 - 4*alpha*beta + beta**2 - 4*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + (-2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 - 4*alpha*beta - 6*alpha + 3*beta**2 + 2*beta 
- 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + (alpha**2*beta**2 - 2*alpha**2 + 4*alpha*beta**2 + 8*alpha*beta + 2*beta**2 + 8*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + (alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 6*alpha - 2*beta**2 + 2*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + (-alpha**2*beta**2 + alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 3*beta**2 - 4*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + (-alpha**2*beta**2 - 2*alpha**2*beta - alpha**2 - 2*alpha*beta**2 - 4*alpha*beta - 2*alpha - beta**2 - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 0*(x) + 0 )
def d8(x, alpha, beta):
    return ( (-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 
1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**9) + (-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 51*alpha*beta**2 - 70*alpha*beta - 20*alpha + 9*beta**4 + 27*beta**3 + 10*beta**2 - 20*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 
99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 128*alpha*beta**2 + 72*alpha*beta + 12*alpha + 18*beta**4 + 94*beta**3 + 170*beta**2 + 120*beta + 
24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + (7*alpha**3*beta**3 + 21*alpha**3*beta**2 + 18*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**4 + 57*alpha**2*beta**3 + 136*alpha**2*beta**2 + 128*alpha**2*beta + 32*alpha**2 + 18*alpha*beta**4 + 111*alpha*beta**3 + 263*alpha*beta**2 + 246*alpha*beta + 
60*alpha - 9*beta**4 - 11*beta**3 + 50*beta**2 + 84*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + (12*alpha**3*beta**2 + 24*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**3 + 40*alpha**2*beta + 16*alpha**2 - 36*alpha*beta**4 - 168*alpha*beta**3 - 238*alpha*beta**2 - 108*alpha*beta - 12*alpha - 36*beta**4 - 164*beta**3 - 250*beta**2 - 144*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + (-14*alpha**3*beta**3 - 42*alpha**3*beta**2 - 36*alpha**3*beta - 8*alpha**3 - 18*alpha**2*beta**4 - 114*alpha**2*beta**3 - 236*alpha**2*beta**2 - 184*alpha**2*beta - 40*alpha**2 - 36*alpha*beta**4 - 195*alpha*beta**3 - 373*alpha*beta**2 - 282*alpha*beta - 60*alpha - 9*beta**4 - 59*beta**3 - 130*beta**2 - 108*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 
+ 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 116*alpha*beta**2 + 48*alpha*beta + 4*alpha + 18*beta**4 + 78*beta**3 + 110*beta**2 + 56*beta + 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + (7*alpha**3*beta**2 + 14*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**3 + 48*alpha**2*beta**2 + 64*alpha**2*beta + 16*alpha**2 + 18*alpha*beta**3 + 75*alpha*beta**2 + 86*alpha*beta + 20*alpha + 9*beta**3 + 34*beta**2 + 36*beta + 8)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 + 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + beta**11 + 14*beta**10 + 85*beta**9 + 292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)*(x**2) + 0*(x) + 0 )
def d9(x, alpha, beta):
    return ( 1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**9) + (2*alpha - beta + 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + (alpha**2 - 2*alpha*beta - 2*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + (-alpha**2*beta - alpha**2 - 2*alpha*beta - 6*alpha + beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + (-2*alpha**2 + 4*alpha*beta + 4*beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + (2*alpha**2*beta + 2*alpha**2 + 4*alpha*beta + 6*alpha + beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + (alpha**2 - 2*alpha*beta - 2*beta - 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + (-alpha**2 - 2*alpha - 1)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)*(x**2) + 0*(x) + 0 )
def d0_prime(x, alpha, beta):
    return ( 9*(8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + 8*(9*alpha**4 - 9*alpha**3*beta + 27*alpha**3 - 12*alpha**2*beta**2 - 51*alpha**2*beta + 10*alpha**2 - 24*alpha*beta**2 - 70*alpha*beta - 20*alpha - 8*beta**2 - 20*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + 7*(-18*alpha**4*beta - 18*alpha**4 
- 6*alpha**3*beta**2 - 84*alpha**3*beta - 94*alpha**3 + 6*alpha**2*beta**3 - 128*alpha**2*beta - 170*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 72*alpha*beta - 120*alpha + 4*beta**3 + 8*beta**2 - 12*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + 6*(9*alpha**4*beta**2 + 18*alpha**4*beta - 9*alpha**4 + 7*alpha**3*beta**3 + 57*alpha**3*beta**2 + 111*alpha**3*beta - 11*alpha**3 + 21*alpha**2*beta**3 + 136*alpha**2*beta**2 + 263*alpha**2*beta + 50*alpha**2 + 18*alpha*beta**3 + 128*alpha*beta**2 + 246*alpha*beta + 84*alpha + 4*beta**3 + 32*beta**2 + 60*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + 5*(36*alpha**4*beta + 36*alpha**4 + 12*alpha**3*beta**2 + 168*alpha**3*beta + 164*alpha**3 - 12*alpha**2*beta**3 + 238*alpha**2*beta + 250*alpha**2 - 24*alpha*beta**3 - 40*alpha*beta**2 + 108*alpha*beta + 144*alpha - 8*beta**3 - 16*beta**2 + 12*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + 4*(-18*alpha**4*beta**2 - 36*alpha**4*beta - 9*alpha**4 - 14*alpha**3*beta**3 - 114*alpha**3*beta**2 - 195*alpha**3*beta - 59*alpha**3 - 42*alpha**2*beta**3 - 236*alpha**2*beta**2 - 373*alpha**2*beta - 130*alpha**2 - 36*alpha*beta**3 - 184*alpha*beta**2 - 282*alpha*beta - 108*alpha - 8*beta**3 - 40*beta**2 - 60*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + 3*(-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 78*alpha**3 + 6*alpha**2*beta**3 - 116*alpha**2*beta - 110*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 48*alpha*beta - 56*alpha + 4*beta**3 + 8*beta**2 - 
4*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 2*(9*alpha**3*beta**2 + 18*alpha**3*beta + 9*alpha**3 + 7*alpha**2*beta**3 + 48*alpha**2*beta**2 + 75*alpha**2*beta + 34*alpha**2 + 14*alpha*beta**3 + 64*alpha*beta**2 + 86*alpha*beta + 36*alpha + 4*beta**3 + 16*beta**2 + 20*beta + 8)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 + alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x) + 0 )
def d1_prime(x, alpha, beta):
    return ( 9*1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - 2*beta - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(-2*alpha*beta - 2*alpha + beta**2 - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(alpha*beta**2 + 2*alpha*beta - alpha + beta**2 + 6*beta + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(4*alpha*beta + 4*alpha 
- 2*beta**2 + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(-2*alpha*beta**2 - 4*alpha*beta - alpha - 2*beta**2 - 6*beta - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 
3*(-2*alpha*beta - 2*alpha + beta**2 - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(beta**2 + 2*beta + 1)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x) + 0 )
def d2_prime(x, alpha, beta):
    return ( 9*(3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + 8*(3*alpha**2*beta + 8*alpha**2 - 3*alpha*beta**2 - 11*alpha*beta - 7*alpha + 2*beta**2 + 5*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**7) + 7*(3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 9*alpha*beta - 12*alpha - 2*beta**3 - 4*beta**2 + 6*beta + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + 6*(-3*alpha**3*beta**2 - 12*alpha**3*beta - 11*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 13*alpha**2*beta - 8*alpha**2 + 
7*alpha*beta**2 + 24*alpha*beta + 15*alpha - beta**3 - 8*beta**2 - 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**5) + 5*(3*alpha**3*beta**3 + 18*alpha**3*beta**2 + 30*alpha**3*beta + 8*alpha**3 + 24*alpha**2*beta**2 + 88*alpha**2*beta + 64*alpha**2 - 6*alpha*beta**3 - 28*alpha*beta**2 - 27*alpha*beta + 4*beta**3 + 8*beta**2 - 6*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + 4*(-alpha**3*beta**3 + 12*alpha**3*beta + 14*alpha**3 - 6*alpha**2*beta**3 - 28*alpha**2*beta**2 - 35*alpha**2*beta - 8*alpha**2 - 5*alpha*beta**2 - 15*alpha*beta - 9*alpha + 2*beta**3 + 10*beta**2 + 15*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**3) + 3*(-5*alpha**3*beta**3 - 30*alpha**3*beta**2 - 57*alpha**3*beta - 32*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 15*alpha*beta + 4*alpha - 2*beta**3 - 4*beta**2 + 2*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 2*(2*alpha**3*beta**3 + 9*alpha**3*beta**2 + 12*alpha**3*beta + 5*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 19*alpha**2*beta + 8*alpha**2 + alpha*beta**2 + 2*alpha*beta + alpha - 
beta**3 - 4*beta**2 - 5*beta - 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x) + 0 )
def d3_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(2*alpha - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(-2*alpha**2*beta - 3*alpha**2 + 2*alpha*beta**2 + 4*alpha*beta - 2*alpha + beta**2 + 6*beta + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 8*alpha - 2*beta**2 + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(-alpha**2*beta**2 + 2*alpha**2 - 4*alpha*beta**2 - 8*alpha*beta - 2*alpha - 2*beta**2 - 6*beta - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 3*(-alpha**2*beta**2 - 4*alpha**2*beta - 3*alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x) + 0 )
def d4_prime(x, alpha, beta):
    return ( 9*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + 8*(4*alpha**2 - 7*alpha*beta + alpha + 4*beta**2 + beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + 7*(2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 6*alpha - 2*beta**3 + 2*beta**2 + 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + 6*(-3*alpha**3*beta - 3*alpha**3 + 4*alpha**2*beta**2 - alpha**2*beta - 13*alpha**2 - 3*alpha*beta**3 - alpha*beta**2 + 12*alpha*beta - 6*alpha - 3*beta**3 - 13*beta**2 - 6*beta - 4)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + 5*(-4*alpha**3 + 16*alpha**2*beta + 4*alpha**2 - 16*alpha*beta**2 + 6*alpha + 4*beta**3 - 4*beta**2 - 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + 4*(alpha**3*beta**3 + 3*alpha**3*beta**2 + 9*alpha**3*beta + 7*alpha**3 + 3*alpha**2*beta**3 + alpha**2*beta**2 + 11*alpha**2*beta + 17*alpha**2 + 9*alpha*beta**3 + 11*alpha*beta**2 + 6*alpha*beta + 12*alpha + 7*beta**3 + 17*beta**2 + 12*beta + 6)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + 3*(2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 2*alpha - 2*beta**3 + 2*beta**2 + 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 2*(-2*alpha**2*beta**2 - 4*alpha**2*beta - 5*alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 6*alpha - 5*beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x) + 0 )
def d5_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + 8*(2*alpha - 2*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + 7*(alpha**2 - 4*alpha*beta - 2*alpha + beta**2 - 2*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + 6*(-2*alpha**2*beta - 2*alpha**2 + 2*alpha*beta**2 - 6*alpha + 2*beta**2 + 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + 5*(alpha**2*beta**2 + 2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 + 12*alpha*beta + 6*alpha - beta**2 + 6*beta + 6)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + 4*(4*alpha**2*beta + 4*alpha**2 - 4*alpha*beta**2 + 6*alpha - 4*beta**2 - 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 
2*beta + 1)*(x**3) + 3*(-2*alpha**2*beta**2 - 4*alpha**2*beta - alpha**2 - 4*alpha*beta**2 - 12*alpha*beta - 6*alpha - beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 2*(-2*alpha + 2*beta)/(alpha*beta + alpha + beta + 1)*(x) + 1 )
def d6_prime(x, alpha, beta):
    return ( 9*(-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + 8*(-3*alpha**2*beta + 2*alpha**2 + 3*alpha*beta**2 - 11*alpha*beta + 5*alpha + 8*beta**2 - 7*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**7) + 7*(-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 - 3*alpha*beta**3 + 44*alpha*beta**2 - 9*alpha*beta - 6*alpha - 8*beta**3 + 32*beta**2 + 12*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + 6*(3*alpha**3*beta**2 - alpha**3 - 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 7*alpha**2*beta - 8*alpha**2 - 12*alpha*beta**3 + 13*alpha*beta**2 + 24*alpha*beta - 15*alpha - 11*beta**3 - 8*beta**2 + 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**5) + 5*(-3*alpha**3*beta**3 + 6*alpha**3*beta - 4*alpha**3 - 18*alpha**2*beta**3 - 24*alpha**2*beta**2 + 28*alpha**2*beta - 8*alpha**2 - 30*alpha*beta**3 - 88*alpha*beta**2 + 27*alpha*beta + 6*alpha - 8*beta**3 - 64*beta**2 + 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + 4*(-alpha**3*beta**3 - 6*alpha**3*beta**2 + 2*alpha**3 - 28*alpha**2*beta**2 
- 5*alpha**2*beta + 10*alpha**2 + 12*alpha*beta**3 - 35*alpha*beta**2 - 15*alpha*beta + 15*alpha + 14*beta**3 - 8*beta**2 - 9*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**3) + 3*(5*alpha**3*beta**3 - 3*alpha**3*beta + 2*alpha**3 + 30*alpha**2*beta**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 + 57*alpha*beta**3 + 44*alpha*beta**2 - 15*alpha*beta - 2*alpha + 32*beta**3 + 32*beta**2 - 4*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**2) + 2*(2*alpha**3*beta**3 + 3*alpha**3*beta**2 - alpha**3 + 9*alpha**2*beta**3 + 14*alpha**2*beta**2 + alpha**2*beta - 4*alpha**2 + 12*alpha*beta**3 + 19*alpha*beta**2 + 2*alpha*beta - 5*alpha + 5*beta**3 + 8*beta**2 + beta - 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x) + 0 )
def d7_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + 8*(2*alpha - 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + beta**2 - 4*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + 6*(-2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 - 4*alpha*beta - 6*alpha + 3*beta**2 + 2*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + 5*(alpha**2*beta**2 - 2*alpha**2 + 4*alpha*beta**2 + 8*alpha*beta + 2*beta**2 + 8*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + 4*(alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 6*alpha - 2*beta**2 + 2*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + 3*(-alpha**2*beta**2 + alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 3*beta**2 - 4*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 2*(-alpha**2*beta**2 - 2*alpha**2*beta - alpha**2 - 2*alpha*beta**2 - 4*alpha*beta - 2*alpha - beta**2 - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x) + 0 )       
def d8_prime(x, alpha, beta):
    return ( 9*(-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 
+ 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + 8*(-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 51*alpha*beta**2 - 70*alpha*beta - 20*alpha + 9*beta**4 + 27*beta**3 + 10*beta**2 - 20*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 
39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + 7*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 
6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 128*alpha*beta**2 + 72*alpha*beta + 12*alpha + 18*beta**4 + 94*beta**3 + 170*beta**2 + 120*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + 6*(7*alpha**3*beta**3 + 21*alpha**3*beta**2 + 18*alpha**3*beta 
+ 4*alpha**3 + 9*alpha**2*beta**4 + 57*alpha**2*beta**3 + 136*alpha**2*beta**2 + 128*alpha**2*beta + 32*alpha**2 + 18*alpha*beta**4 + 111*alpha*beta**3 + 263*alpha*beta**2 + 246*alpha*beta + 60*alpha - 9*beta**4 - 11*beta**3 + 50*beta**2 + 84*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + 5*(12*alpha**3*beta**2 + 24*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**3 + 40*alpha**2*beta + 16*alpha**2 - 36*alpha*beta**4 - 168*alpha*beta**3 - 238*alpha*beta**2 - 108*alpha*beta - 12*alpha - 36*beta**4 - 164*beta**3 - 250*beta**2 - 144*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + 4*(-14*alpha**3*beta**3 - 42*alpha**3*beta**2 - 36*alpha**3*beta - 8*alpha**3 - 18*alpha**2*beta**4 - 114*alpha**2*beta**3 - 236*alpha**2*beta**2 - 184*alpha**2*beta - 40*alpha**2 - 36*alpha*beta**4 - 195*alpha*beta**3 - 373*alpha*beta**2 - 282*alpha*beta - 60*alpha - 9*beta**4 - 59*beta**3 - 130*beta**2 - 108*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + 3*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 116*alpha*beta**2 + 48*alpha*beta + 4*alpha + 18*beta**4 + 78*beta**3 + 110*beta**2 + 56*beta + 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 
+ 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**2) + 2*(7*alpha**3*beta**2 + 14*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**3 + 48*alpha**2*beta**2 + 64*alpha**2*beta + 16*alpha**2 + 18*alpha*beta**3 + 75*alpha*beta**2 + 86*alpha*beta + 20*alpha + 9*beta**3 + 34*beta**2 + 36*beta + 8)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 + 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + 
beta**11 + 14*beta**10 + 85*beta**9 + 292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)*(x) + 0 )
def d9_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + 8*(2*alpha - beta + 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + 7*(alpha**2 - 2*alpha*beta - 2*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta - alpha**2 - 2*alpha*beta - 6*alpha + beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + 5*(-2*alpha**2 + 4*alpha*beta + 4*beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + 4*(2*alpha**2*beta + 2*alpha**2 + 4*alpha*beta + 6*alpha + 
beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 3*(alpha**2 - 2*alpha*beta - 2*beta - 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**2) + 2*(-alpha**2 - 2*alpha - 1)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)*(x) + 0 )

print("def d0_horner(x, alpha, beta) -> float:\n    return (", horner(d0(x, alpha, beta)), ")\n")
print("def d1_horner(x, alpha, beta) -> float:\n    return (", horner(d1(x, alpha, beta)), ")\n")
print("def d2_horner(x, alpha, beta) -> float:\n    return (", horner(d2(x, alpha, beta)), ")\n")
print("def d3_horner(x, alpha, beta) -> float:\n    return (", horner(d3(x, alpha, beta)), ")\n")
print("def d4_horner(x, alpha, beta) -> float:\n    return (", horner(d4(x, alpha, beta)), ")\n")
print("def d5_horner(x, alpha, beta) -> float:\n    return (", horner(d5(x, alpha, beta)), ")\n")
print("def d6_horner(x, alpha, beta) -> float:\n    return (", horner(d6(x, alpha, beta)), ")\n")
print("def d7_horner(x, alpha, beta) -> float:\n    return (", horner(d7(x, alpha, beta)), ")\n")
print("def d8_horner(x, alpha, beta) -> float:\n    return (", horner(d8(x, alpha, beta)), ")\n")
print("def d9_horner(x, alpha, beta) -> float:\n    return (", horner(d9(x, alpha, beta)), ")\n")

print("def d0_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d0_prime(x, alpha, beta)), ")\n")
print("def d1_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d1_prime(x, alpha, beta)), ")\n")
print("def d2_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d2_prime(x, alpha, beta)), ")\n")
print("def d3_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d3_prime(x, alpha, beta)), ")\n")
print("def d4_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d4_prime(x, alpha, beta)), ")\n")
print("def d5_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d5_prime(x, alpha, beta)), ")\n")
print("def d6_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d6_prime(x, alpha, beta)), ")\n")
print("def d7_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d7_prime(x, alpha, beta)), ")\n")
print("def d8_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d8_prime(x, alpha, beta)), ")\n")
print("def d9_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d9_prime(x, alpha, beta)), ")\n")