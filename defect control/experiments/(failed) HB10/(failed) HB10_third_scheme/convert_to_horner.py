

from sympy.polys.polyfuncs import horner
from sympy.abc import x
from sympy import symbols

alpha = symbols("alpha")
beta = symbols("beta")


def d0(x, alpha, beta):
    return ( (8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 
+ 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**9) 
+ (9*alpha**4 - 9*alpha**3*beta + 99*alpha**3 - 12*alpha**2*beta**2 + 3*alpha**2*beta + 280*alpha**2 - 24*alpha*beta**2 + 38*alpha*beta + 268*alpha - 8*beta**2 + 16*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + (-18*alpha**4*beta + 54*alpha**4 - 6*alpha**3*beta**2 - 156*alpha**3*beta + 410*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 320*alpha**2*beta + 990*alpha**2 + 12*alpha*beta**3 - 172*alpha*beta**2 - 200*alpha*beta + 872*alpha + 4*beta**3 - 56*beta**2 - 28*beta + 200)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 
+ alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + (9*alpha**4*beta**2 - 108*alpha**4*beta + 117*alpha**4 + 7*alpha**3*beta**3 + 15*alpha**3*beta**2 - 729*alpha**3*beta + 759*alpha**3 + 63*alpha**2*beta**3 - 200*alpha**2*beta**2 - 1557*alpha**2*beta + 1660*alpha**2 + 102*alpha*beta**3 - 404*alpha*beta**2 - 1210*alpha*beta + 1372*alpha + 32*beta**3 - 136*beta**2 - 248*beta + 304)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + (54*alpha**4*beta**2 - 234*alpha**4*beta + 108*alpha**4 + 42*alpha**3*beta**3 + 228*alpha**3*beta**2 - 1434*alpha**3*beta + 644*alpha**3 + 240*alpha**2*beta**3 + 144*alpha**2*beta**2 - 2972*alpha**2*beta + 1320*alpha**2 + 336*alpha*beta**3 - 196*alpha*beta**2 - 2336*alpha*beta + 1040*alpha + 100*beta**3 - 104*beta**2 - 496*beta + 224)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + (117*alpha**4*beta**2 - 216*alpha**4*beta + 36*alpha**4 + 91*alpha**3*beta**3 + 591*alpha**3*beta**2 - 1260*alpha**3*beta + 204*alpha**3 + 423*alpha**2*beta**3 + 964*alpha**2*beta**2 - 2532*alpha**2*beta + 400*alpha**2 + 534*alpha*beta**3 + 556*alpha*beta**2 - 1960*alpha*beta + 304*alpha + 152*beta**3 + 80*beta**2 - 416*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + (108*alpha**4*beta**2 - 72*alpha**4*beta + 84*alpha**3*beta**3 + 588*alpha**3*beta**2 - 408*alpha**3*beta + 348*alpha**2*beta**3 + 1104*alpha**2*beta**2 - 800*alpha**2*beta + 408*alpha*beta**3 + 800*alpha*beta**2 - 608*alpha*beta + 112*beta**3 + 160*beta**2 - 128*beta)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + (36*alpha**3*beta**2 + 28*alpha**2*beta**3 + 132*alpha**2*beta**2 + 52*alpha*beta**3 + 136*alpha*beta**2 + 16*beta**3 + 32*beta**2)/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 0*(x) + 0 )
def d1(x, alpha, beta):
    return ( 1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - 2*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (-2*alpha*beta + 6*alpha + beta**2 - 16*beta + 25)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (alpha*beta**2 
- 12*alpha*beta + 13*alpha + 8*beta**2 - 50*beta + 38)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (6*alpha*beta**2 - 26*alpha*beta + 12*alpha + 25*beta**2 - 76*beta + 28)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 38*beta**2 - 56*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + (12*alpha*beta**2 - 8*alpha*beta + 28*beta**2 - 16*beta)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 4*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**2) + 0*(x) + 0 )   
def d2(x, alpha, beta):
    return ( (3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**9) + (6*alpha**2*beta 
+ 16*alpha**2 - 6*alpha*beta**2 + 5*alpha*beta + 58*alpha + 4*beta**2 - 8*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + (3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 + 4*alpha**2*beta + 96*alpha**2 + 3*alpha*beta**3 - 34*alpha*beta**2 - 59*alpha*beta + 164*alpha - 2*beta**3 + 28*beta**2 + 14*beta - 100)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + (-6*alpha**3*beta**2 - 3*alpha**3*beta + 34*alpha**3 + 6*alpha**2*beta**3 - 56*alpha**2*beta**2 - 114*alpha**2*beta + 208*alpha**2 + 21*alpha*beta**3 - 56*alpha*beta**2 - 253*alpha*beta + 226*alpha - 16*beta**3 + 68*beta**2 + 124*beta - 152)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + (3*alpha**3*beta**3 - 18*alpha**3*beta**2 - 51*alpha**3*beta + 44*alpha**3 + 36*alpha**2*beta**3 - 60*alpha**2*beta**2 - 344*alpha**2*beta + 192*alpha**2 + 57*alpha*beta**3 + 14*alpha*beta**2 - 404*alpha*beta + 152*alpha - 50*beta**3 + 52*beta**2 + 248*beta - 112)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + (13*alpha**3*beta**3 - 81*alpha**3*beta + 18*alpha**3 + 78*alpha**2*beta**3 + 64*alpha**2*beta**2 - 360*alpha**2*beta + 64*alpha**2 + 75*alpha*beta**3 + 130*alpha*beta**2 - 292*alpha*beta + 40*alpha - 76*beta**3 - 40*beta**2 + 208*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + (17*alpha**3*beta**3 + 30*alpha**3*beta**2 - 36*alpha**3*beta + 72*alpha**2*beta**3 + 144*alpha**2*beta**2 - 128*alpha**2*beta + 48*alpha*beta**3 + 128*alpha*beta**2 - 80*alpha*beta - 56*beta**3 - 80*beta**2 + 64*beta)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + (7*alpha**3*beta**3 + 18*alpha**3*beta**2 + 24*alpha**2*beta**3 + 64*alpha**2*beta**2 + 12*alpha*beta**3 + 40*alpha*beta**2 - 16*beta**3 - 32*beta**2)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 0*(x) + 0 )
def d3(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**8) + (alpha**2 - 4*alpha*beta + 12*alpha + beta**2 - 16*beta + 25)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (-alpha**2*beta + 2*alpha**2 + alpha*beta**2 - 12*alpha*beta + 13*alpha + 4*beta**2 - 25*beta + 19)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**6) + (alpha**2*beta**2 - 8*alpha**2*beta + 5*alpha**2 + 12*alpha*beta**2 - 52*alpha*beta + 24*alpha + 25*beta**2 - 76*beta + 28)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (2*alpha**2*beta**2 - 5*alpha**2*beta + alpha**2 + 13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 19*beta**2 - 28*beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**4) + (5*alpha**2*beta**2 - 4*alpha**2*beta + 24*alpha*beta**2 - 16*alpha*beta + 28*beta**2 - 16*beta)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**2) + 0*(x) + 0 )
def d4(x, alpha, beta):
    return ( (2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**9) + (4*alpha**2 - 7*alpha*beta 
+ 19*alpha + 4*beta**2 - 17*beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + (2*alpha**3 - 8*alpha**2*beta + 30*alpha**2 + 8*alpha*beta**2 - 56*alpha*beta + 74*alpha - 2*beta**3 + 34*beta**2 - 58*beta + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + (-3*alpha**3*beta + 11*alpha**3 + 4*alpha**2*beta**2 - 57*alpha**2*beta + 85*alpha**2 - 3*alpha*beta**3 
+ 55*alpha*beta**2 - 184*alpha*beta + 148*alpha - 17*beta**3 + 113*beta**2 - 104*beta + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 
3*beta**2 + 3*beta + 1)*(x**6) + (-18*alpha**3*beta + 20*alpha**3 + 24*alpha**2*beta**2 - 158*alpha**2*beta + 108*alpha**2 - 18*alpha*beta**3 + 146*alpha*beta**2 - 320*alpha*beta + 152*alpha - 56*beta**3 + 184*beta**2 - 112*beta + 32)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 
+ 3*beta + 1)*(x**5) + (alpha**3*beta**3 + 3*alpha**3*beta**2 - 36*alpha**3*beta + 12*alpha**3 + 3*alpha**2*beta**3 + 61*alpha**2*beta**2 - 204*alpha**2*beta + 52*alpha**2 - 36*alpha*beta**3 + 196*alpha*beta**2 - 304*alpha*beta + 64*alpha - 88*beta**3 + 152*beta**2 - 80*beta + 16)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 
+ 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + (4*alpha**3*beta**3 + 12*alpha**3*beta**2 - 24*alpha**3*beta + 12*alpha**2*beta**3 
+ 84*alpha**2*beta**2 - 104*alpha**2*beta - 24*alpha*beta**3 + 152*alpha*beta**2 - 128*alpha*beta - 64*beta**3 + 64*beta**2 - 32*beta)/(alpha**3*beta**3 
+ 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + (4*alpha**3*beta**3 + 12*alpha**3*beta**2 + 12*alpha**2*beta**3 + 52*alpha**2*beta**2 + 64*alpha*beta**2 - 16*beta**3 + 16*beta**2)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 0*(x) + 0 )
def d5(x, alpha, beta):
    return ( 1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**9) + (2*alpha - 2*beta + 9)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + (alpha**2 - 4*alpha*beta + 14*alpha + beta**2 - 18*beta + 32)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + (-2*alpha**2*beta + 5*alpha**2 + 2*alpha*beta**2 - 28*alpha*beta + 36*alpha + 9*beta**2 - 64*beta + 56)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + (alpha**2*beta**2 - 10*alpha**2*beta + 8*alpha**2 + 14*alpha*beta**2 
- 72*alpha*beta + 40*alpha + 32*beta**2 - 112*beta + 48)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + (5*alpha**2*beta**2 - 16*alpha**2*beta + 4*alpha**2 + 36*alpha*beta**2 - 80*alpha*beta + 16*alpha + 56*beta**2 - 96*beta + 16)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + (8*alpha**2*beta**2 - 8*alpha**2*beta + 40*alpha*beta**2 - 32*alpha*beta + 48*beta**2 - 32*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + (4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 0*(x) + 0 )
def d6(x, alpha, beta):
    return ( (-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**9) + (-6*alpha**2*beta + 4*alpha**2 + 6*alpha*beta**2 - 49*alpha*beta + 28*alpha + 16*beta**2 - 86*beta + 40)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + (-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 62*alpha**2*beta + 36*alpha**2 - 3*alpha*beta**3 + 92*alpha*beta**2 - 293*alpha*beta + 146*alpha - 8*beta**3 + 160*beta**2 - 388*beta + 164)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**7) + (6*alpha**3*beta**2 - 21*alpha**3*beta + 12*alpha**3 - 6*alpha**2*beta**3 + 112*alpha**2*beta**2 - 252*alpha**2*beta + 124*alpha**2 - 45*alpha*beta**3 + 502*alpha*beta**2 - 883*alpha*beta + 376*alpha - 78*beta**3 + 656*beta**2 - 950*beta + 352)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + (-3*alpha**3*beta**3 + 36*alpha**3*beta**2 - 57*alpha**3*beta + 26*alpha**3 - 54*alpha**2*beta**3 + 396*alpha**2*beta**2 - 518*alpha**2*beta + 204*alpha**2 - 237*alpha*beta**3 + 1328*alpha*beta**2 - 1484*alpha*beta + 512*alpha - 308*beta**3 + 1408*beta**2 - 1360*beta + 416)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + (-17*alpha**3*beta**3 + 78*alpha**3*beta**2 - 75*alpha**3*beta + 24*alpha**3 - 180*alpha**2*beta**3 + 664*alpha**2*beta**2 - 570*alpha**2*beta + 160*alpha**2 - 591*alpha*beta**3 + 1840*alpha*beta**2 - 1408*alpha*beta + 352*alpha - 622*beta**3 + 1664*beta**2 - 1136*beta + 256)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + (-33*alpha**3*beta**3 + 72*alpha**3*beta**2 - 48*alpha**3*beta + 8*alpha**3 - 270*alpha**2*beta**3 + 528*alpha**2*beta**2 - 320*alpha**2*beta + 48*alpha**2 - 732*alpha*beta**3 + 1280*alpha*beta**2 - 704*alpha*beta + 96*alpha - 656*beta**3 + 1024*beta**2 - 512*beta + 64)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + (-23*alpha**2*beta**2 + 24*alpha**2*beta - 12*alpha**2 - 116*alpha*beta**2 + 112*alpha*beta - 48*alpha - 152*beta**2 + 128*beta - 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 0*(x) + 1 )
def d7(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**9) + (alpha - beta + 5)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**8) + (alpha**2 - 4*alpha*beta + 16*alpha + beta**2 - 20*beta + 41)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + (-alpha**2*beta + 3*alpha**2 + alpha*beta**2 - 16*alpha*beta + 25*alpha + 5*beta**2 - 41*beta + 44)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**6) + (alpha**2*beta**2 - 12*alpha**2*beta + 13*alpha**2 + 16*alpha*beta**2 - 100*alpha*beta + 76*alpha + 41*beta**2 - 176*beta + 104)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + (3*alpha**2*beta**2 - 13*alpha**2*beta + 6*alpha**2 + 25*alpha*beta**2 - 76*alpha*beta + 28*alpha + 44*beta**2 - 104*beta + 32)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**4) + (13*alpha**2*beta**2 - 24*alpha**2*beta + 4*alpha**2 + 76*alpha*beta**2 - 112*alpha*beta + 16*alpha + 104*beta**2 - 128*beta + 16)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + (3*alpha*beta - 2*alpha + 8*beta - 4)/(alpha*beta + 2*beta)*(x**2) + 1*(x) + 0 )
def d8(x, alpha, beta):
    return ( (-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**9) + (-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 105*alpha*beta**2 - 178*alpha*beta - 56*alpha + 9*beta**4 - 45*beta**3 - 260*beta**2 - 308*beta - 80)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 212*alpha**2*beta - 72*alpha**2 + 18*alpha*beta**4 + 12*alpha*beta**3 - 496*alpha*beta**2 - 920*alpha*beta - 292*alpha + 90*beta**4 + 22*beta**3 - 
830*beta**2 - 1192*beta - 328)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + (7*alpha**3*beta**3 - 21*alpha**3*beta**2 - 66*alpha**3*beta - 24*alpha**3 
+ 9*alpha**2*beta**4 + 99*alpha**2*beta**3 - 200*alpha**2*beta**2 - 684*alpha**2*beta - 248*alpha**2 + 144*alpha*beta**4 + 447*alpha*beta**3 - 773*alpha*beta**2 - 2218*alpha*beta - 752*alpha + 369*beta**4 + 731*beta**3 - 1000*beta**2 - 2324*beta - 704)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + 
beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + (42*alpha**3*beta**3 + 12*alpha**3*beta**2 - 120*alpha**3*beta - 52*alpha**3 + 54*alpha**2*beta**4 + 456*alpha**2*beta**3 + 144*alpha**2*beta**2 - 956*alpha**2*beta - 408*alpha**2 + 450*alpha*beta**4 + 1758*alpha*beta**3 + 416*alpha*beta**2 - 2552*alpha*beta - 1024*alpha + 792*beta**4 + 2248*beta**3 + 400*beta**2 - 2272*beta - 832)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 
+ 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + (91*alpha**3*beta**3 + 123*alpha**3*beta**2 - 66*alpha**3*beta - 48*alpha**3 + 117*alpha**2*beta**4 + 891*alpha**2*beta**3 + 964*alpha**2*beta**2 - 444*alpha**2*beta - 320*alpha**2 + 684*alpha*beta**4 + 2940*alpha*beta**3 + 2536*alpha*beta**2 - 1024*alpha*beta - 704*alpha + 936*beta**4 + 3128*beta**3 + 2240*beta**2 - 800*beta - 512)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + (84*alpha**3*beta**3 + 156*alpha**3*beta**2 + 24*alpha**3*beta - 16*alpha**3 + 108*alpha**2*beta**4 + 780*alpha**2*beta**3 + 1104*alpha**2*beta**2 + 160*alpha**2*beta - 96*alpha**2 + 504*alpha*beta**4 + 2280*alpha*beta**3 + 2624*alpha*beta**2 + 352*alpha*beta - 192*alpha + 576*beta**4 + 2112*beta**3 + 2080*beta**2 + 256*beta - 128)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 
240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 
+ 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + (28*alpha**3*beta**2 + 60*alpha**3*beta + 24*alpha**3 + 36*alpha**2*beta**3 + 252*alpha**2*beta**2 + 400*alpha**2*beta + 144*alpha**2 + 144*alpha*beta**3 + 672*alpha*beta**2 + 880*alpha*beta + 288*alpha + 144*beta**3 + 560*beta**2 + 640*beta + 192)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 + 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)*(x**2) + 0*(x) + 0 )
def d9(x, alpha, beta):
    return ( 1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**9) + (2*alpha - beta + 10)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 
2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + (alpha**2 - 2*alpha*beta + 16*alpha - 10*beta + 41)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + (-alpha**2*beta + 6*alpha**2 - 16*alpha*beta + 50*alpha - 41*beta + 88)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 
104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + (-6*alpha**2*beta + 13*alpha**2 - 50*alpha*beta + 76*alpha - 88*beta + 104)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + (-13*alpha**2*beta 
+ 12*alpha**2 - 76*alpha*beta + 56*alpha - 104*beta + 64)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + (-12*alpha**2*beta + 4*alpha**2 - 56*alpha*beta + 16*alpha - 64*beta + 16)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 
(-4*alpha**2 - 16*alpha - 16)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 + 104*beta**3 + 
64*beta**2 + 16*beta)*(x**2) + 0*(x) + 0 )
def d0_prime(x, alpha, beta):
    return ( 9*(8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + 8*(9*alpha**4 - 9*alpha**3*beta + 99*alpha**3 - 12*alpha**2*beta**2 + 3*alpha**2*beta + 280*alpha**2 - 24*alpha*beta**2 + 38*alpha*beta + 268*alpha - 8*beta**2 + 16*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 
+ 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 
8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + 7*(-18*alpha**4*beta + 54*alpha**4 - 6*alpha**3*beta**2 - 156*alpha**3*beta + 410*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 320*alpha**2*beta + 990*alpha**2 + 12*alpha*beta**3 - 172*alpha*beta**2 - 200*alpha*beta + 872*alpha + 4*beta**3 - 56*beta**2 - 28*beta + 200)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + 6*(9*alpha**4*beta**2 - 108*alpha**4*beta + 117*alpha**4 + 7*alpha**3*beta**3 + 15*alpha**3*beta**2 - 729*alpha**3*beta + 759*alpha**3 + 63*alpha**2*beta**3 - 200*alpha**2*beta**2 - 1557*alpha**2*beta + 1660*alpha**2 + 102*alpha*beta**3 - 404*alpha*beta**2 - 1210*alpha*beta + 1372*alpha + 32*beta**3 - 136*beta**2 - 248*beta + 304)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 
377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + 5*(54*alpha**4*beta**2 - 234*alpha**4*beta + 108*alpha**4 + 42*alpha**3*beta**3 + 228*alpha**3*beta**2 - 1434*alpha**3*beta + 644*alpha**3 + 240*alpha**2*beta**3 + 144*alpha**2*beta**2 - 2972*alpha**2*beta + 1320*alpha**2 + 336*alpha*beta**3 - 196*alpha*beta**2 - 2336*alpha*beta + 1040*alpha + 100*beta**3 - 104*beta**2 - 496*beta + 224)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + 4*(117*alpha**4*beta**2 - 216*alpha**4*beta + 36*alpha**4 + 91*alpha**3*beta**3 + 591*alpha**3*beta**2 - 1260*alpha**3*beta + 204*alpha**3 + 423*alpha**2*beta**3 + 964*alpha**2*beta**2 - 2532*alpha**2*beta + 400*alpha**2 + 534*alpha*beta**3 + 556*alpha*beta**2 - 1960*alpha*beta + 304*alpha + 152*beta**3 + 80*beta**2 - 416*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + 3*(108*alpha**4*beta**2 - 72*alpha**4*beta + 84*alpha**3*beta**3 + 588*alpha**3*beta**2 - 408*alpha**3*beta + 348*alpha**2*beta**3 + 1104*alpha**2*beta**2 - 800*alpha**2*beta + 408*alpha*beta**3 + 800*alpha*beta**2 - 608*alpha*beta + 112*beta**3 + 160*beta**2 - 128*beta)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 2*(36*alpha**3*beta**2 + 28*alpha**2*beta**3 + 132*alpha**2*beta**2 + 52*alpha*beta**3 + 136*alpha*beta**2 + 16*beta**3 + 32*beta**2)/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x) + 0 )
def d1_prime(x, alpha, beta):
    return ( 9*1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 
88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - 2*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 
6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(-2*alpha*beta + 6*alpha + beta**2 - 16*beta + 25)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(alpha*beta**2 - 12*alpha*beta + 13*alpha + 8*beta**2 - 50*beta + 38)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(6*alpha*beta**2 - 26*alpha*beta + 12*alpha + 25*beta**2 - 76*beta + 28)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 38*beta**2 - 56*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 3*(12*alpha*beta**2 - 8*alpha*beta + 28*beta**2 - 16*beta)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*4*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x) + 0 )
def d2_prime(x, alpha, beta):
    return ( 9*(3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + 8*(6*alpha**2*beta + 16*alpha**2 - 6*alpha*beta**2 + 5*alpha*beta + 58*alpha + 4*beta**2 - 8*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + 7*(3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 + 4*alpha**2*beta + 96*alpha**2 + 3*alpha*beta**3 - 34*alpha*beta**2 - 59*alpha*beta + 164*alpha - 2*beta**3 + 28*beta**2 + 14*beta - 100)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + 6*(-6*alpha**3*beta**2 - 3*alpha**3*beta + 34*alpha**3 + 6*alpha**2*beta**3 - 56*alpha**2*beta**2 - 114*alpha**2*beta + 208*alpha**2 + 21*alpha*beta**3 - 56*alpha*beta**2 - 253*alpha*beta + 226*alpha - 16*beta**3 + 68*beta**2 + 124*beta - 152)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + 5*(3*alpha**3*beta**3 - 18*alpha**3*beta**2 - 51*alpha**3*beta + 44*alpha**3 + 36*alpha**2*beta**3 - 60*alpha**2*beta**2 - 344*alpha**2*beta + 192*alpha**2 + 57*alpha*beta**3 + 14*alpha*beta**2 - 404*alpha*beta + 152*alpha - 50*beta**3 + 52*beta**2 + 248*beta - 112)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + 4*(13*alpha**3*beta**3 - 81*alpha**3*beta + 18*alpha**3 + 78*alpha**2*beta**3 + 64*alpha**2*beta**2 - 360*alpha**2*beta + 64*alpha**2 + 75*alpha*beta**3 + 130*alpha*beta**2 - 292*alpha*beta + 40*alpha - 76*beta**3 - 40*beta**2 + 208*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + 3*(17*alpha**3*beta**3 + 30*alpha**3*beta**2 - 36*alpha**3*beta + 72*alpha**2*beta**3 + 144*alpha**2*beta**2 - 128*alpha**2*beta + 48*alpha*beta**3 + 128*alpha*beta**2 - 80*alpha*beta - 56*beta**3 - 80*beta**2 + 64*beta)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 2*(7*alpha**3*beta**3 + 18*alpha**3*beta**2 + 24*alpha**2*beta**3 + 
64*alpha**2*beta**2 + 12*alpha*beta**3 + 40*alpha*beta**2 - 16*beta**3 - 32*beta**2)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x) + 0 )
def d3_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 12*alpha + beta**2 - 16*beta + 25)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(-alpha**2*beta + 2*alpha**2 + alpha*beta**2 - 12*alpha*beta + 13*alpha + 4*beta**2 - 25*beta + 19)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**5) + 5*(alpha**2*beta**2 - 8*alpha**2*beta + 5*alpha**2 + 12*alpha*beta**2 - 52*alpha*beta + 24*alpha + 25*beta**2 - 76*beta + 28)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(2*alpha**2*beta**2 - 5*alpha**2*beta + alpha**2 + 13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 19*beta**2 - 28*beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**3) + 3*(5*alpha**2*beta**2 - 4*alpha**2*beta + 24*alpha*beta**2 - 16*alpha*beta + 28*beta**2 - 16*beta)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x) + 0 )
def d4_prime(x, alpha, beta):
    return ( 9*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + 8*(4*alpha**2 - 7*alpha*beta + 19*alpha + 4*beta**2 - 17*beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + 7*(2*alpha**3 - 8*alpha**2*beta + 30*alpha**2 + 8*alpha*beta**2 - 56*alpha*beta + 74*alpha - 2*beta**3 + 34*beta**2 - 58*beta + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 
+ 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta 
+ 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + 6*(-3*alpha**3*beta + 11*alpha**3 + 4*alpha**2*beta**2 - 57*alpha**2*beta + 85*alpha**2 - 3*alpha*beta**3 + 55*alpha*beta**2 - 184*alpha*beta + 148*alpha - 17*beta**3 + 113*beta**2 - 104*beta + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + 5*(-18*alpha**3*beta + 20*alpha**3 + 24*alpha**2*beta**2 - 158*alpha**2*beta + 108*alpha**2 - 18*alpha*beta**3 + 146*alpha*beta**2 - 320*alpha*beta + 152*alpha - 56*beta**3 + 184*beta**2 - 112*beta + 32)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 
3*beta**2 + 3*beta + 1)*(x**4) + 4*(alpha**3*beta**3 + 3*alpha**3*beta**2 - 36*alpha**3*beta + 12*alpha**3 + 3*alpha**2*beta**3 + 61*alpha**2*beta**2 - 204*alpha**2*beta + 52*alpha**2 - 36*alpha*beta**3 + 196*alpha*beta**2 - 304*alpha*beta + 64*alpha - 88*beta**3 + 152*beta**2 - 80*beta + 16)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + 3*(4*alpha**3*beta**3 + 12*alpha**3*beta**2 - 24*alpha**3*beta + 12*alpha**2*beta**3 + 84*alpha**2*beta**2 - 104*alpha**2*beta - 24*alpha*beta**3 + 152*alpha*beta**2 - 128*alpha*beta - 64*beta**3 + 64*beta**2 - 32*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 2*(4*alpha**3*beta**3 + 12*alpha**3*beta**2 + 12*alpha**2*beta**3 + 52*alpha**2*beta**2 + 64*alpha*beta**2 - 16*beta**3 + 16*beta**2)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 
1)*(x) + 0 )
def d5_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + 8*(2*alpha - 
2*beta + 9)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 14*alpha + beta**2 - 18*beta + 32)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + 6*(-2*alpha**2*beta + 5*alpha**2 + 2*alpha*beta**2 - 28*alpha*beta + 36*alpha + 9*beta**2 - 64*beta + 56)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + 5*(alpha**2*beta**2 - 10*alpha**2*beta + 8*alpha**2 + 14*alpha*beta**2 - 72*alpha*beta + 40*alpha + 32*beta**2 - 112*beta + 48)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + 4*(5*alpha**2*beta**2 - 16*alpha**2*beta + 4*alpha**2 + 36*alpha*beta**2 - 80*alpha*beta + 16*alpha + 56*beta**2 - 96*beta + 16)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + 3*(8*alpha**2*beta**2 - 8*alpha**2*beta + 40*alpha*beta**2 - 32*alpha*beta + 48*beta**2 - 32*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 2*(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x) + 0 )
def d6_prime(x, alpha, beta):
    return ( 9*(-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + 8*(-6*alpha**2*beta + 4*alpha**2 + 6*alpha*beta**2 - 49*alpha*beta + 28*alpha + 16*beta**2 - 86*beta + 40)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 
+ 32*beta**3)*(x**7) + 7*(-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 62*alpha**2*beta + 36*alpha**2 - 3*alpha*beta**3 + 92*alpha*beta**2 - 293*alpha*beta + 146*alpha - 8*beta**3 + 160*beta**2 - 388*beta + 164)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + 6*(6*alpha**3*beta**2 - 21*alpha**3*beta + 12*alpha**3 - 6*alpha**2*beta**3 + 112*alpha**2*beta**2 - 252*alpha**2*beta + 124*alpha**2 - 45*alpha*beta**3 + 502*alpha*beta**2 - 883*alpha*beta + 376*alpha - 78*beta**3 + 656*beta**2 - 950*beta + 352)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + 5*(-3*alpha**3*beta**3 + 36*alpha**3*beta**2 - 57*alpha**3*beta + 26*alpha**3 - 54*alpha**2*beta**3 + 396*alpha**2*beta**2 - 518*alpha**2*beta + 204*alpha**2 - 237*alpha*beta**3 + 1328*alpha*beta**2 - 1484*alpha*beta + 512*alpha - 308*beta**3 + 1408*beta**2 - 1360*beta + 416)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + 4*(-17*alpha**3*beta**3 + 78*alpha**3*beta**2 - 75*alpha**3*beta + 24*alpha**3 - 180*alpha**2*beta**3 + 664*alpha**2*beta**2 - 570*alpha**2*beta + 160*alpha**2 - 591*alpha*beta**3 + 1840*alpha*beta**2 - 1408*alpha*beta + 352*alpha - 622*beta**3 + 1664*beta**2 - 1136*beta + 256)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + 3*(-33*alpha**3*beta**3 + 72*alpha**3*beta**2 - 48*alpha**3*beta + 8*alpha**3 - 270*alpha**2*beta**3 + 528*alpha**2*beta**2 - 320*alpha**2*beta + 48*alpha**2 - 732*alpha*beta**3 + 1280*alpha*beta**2 - 704*alpha*beta + 96*alpha - 656*beta**3 + 1024*beta**2 - 512*beta + 64)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**2) + 2*(-23*alpha**2*beta**2 + 24*alpha**2*beta - 12*alpha**2 - 116*alpha*beta**2 + 112*alpha*beta - 48*alpha - 152*beta**2 
+ 128*beta - 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x) + 0 )
def d7_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + 8*(alpha - beta + 5)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 16*alpha + beta**2 - 20*beta + 41)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta + 
3*alpha**2 + alpha*beta**2 - 16*alpha*beta + 25*alpha + 5*beta**2 - 41*beta + 44)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**5) + 5*(alpha**2*beta**2 - 12*alpha**2*beta + 13*alpha**2 + 16*alpha*beta**2 - 100*alpha*beta + 76*alpha + 41*beta**2 - 176*beta + 104)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + 4*(3*alpha**2*beta**2 - 13*alpha**2*beta + 6*alpha**2 + 25*alpha*beta**2 - 76*alpha*beta + 28*alpha + 44*beta**2 - 104*beta 
+ 32)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**3) + 3*(13*alpha**2*beta**2 - 24*alpha**2*beta + 4*alpha**2 + 76*alpha*beta**2 - 112*alpha*beta + 16*alpha + 104*beta**2 - 128*beta + 16)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 2*(3*alpha*beta - 2*alpha + 8*beta - 4)/(alpha*beta + 2*beta)*(x) + 1 )
def d8_prime(x, alpha, beta):
    return ( 9*(-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + 8*(-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 105*alpha*beta**2 - 178*alpha*beta - 56*alpha + 9*beta**4 - 45*beta**3 - 260*beta**2 - 308*beta - 80)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 
1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + 7*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 212*alpha**2*beta - 72*alpha**2 + 18*alpha*beta**4 + 12*alpha*beta**3 - 496*alpha*beta**2 - 920*alpha*beta - 292*alpha + 90*beta**4 + 22*beta**3 - 830*beta**2 - 1192*beta - 328)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + 6*(7*alpha**3*beta**3 - 21*alpha**3*beta**2 - 66*alpha**3*beta - 24*alpha**3 + 9*alpha**2*beta**4 + 99*alpha**2*beta**3 - 200*alpha**2*beta**2 - 684*alpha**2*beta - 248*alpha**2 + 144*alpha*beta**4 + 447*alpha*beta**3 - 773*alpha*beta**2 - 2218*alpha*beta - 752*alpha + 369*beta**4 + 731*beta**3 - 1000*beta**2 - 2324*beta - 704)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) 
+ 5*(42*alpha**3*beta**3 + 12*alpha**3*beta**2 - 120*alpha**3*beta - 52*alpha**3 + 54*alpha**2*beta**4 + 456*alpha**2*beta**3 + 144*alpha**2*beta**2 - 956*alpha**2*beta - 408*alpha**2 + 450*alpha*beta**4 + 1758*alpha*beta**3 + 416*alpha*beta**2 - 2552*alpha*beta - 1024*alpha + 792*beta**4 + 2248*beta**3 + 400*beta**2 - 2272*beta - 832)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + 4*(91*alpha**3*beta**3 + 123*alpha**3*beta**2 - 66*alpha**3*beta - 48*alpha**3 + 117*alpha**2*beta**4 + 891*alpha**2*beta**3 + 964*alpha**2*beta**2 - 444*alpha**2*beta - 320*alpha**2 + 684*alpha*beta**4 + 2940*alpha*beta**3 + 2536*alpha*beta**2 - 1024*alpha*beta - 704*alpha + 936*beta**4 + 3128*beta**3 + 2240*beta**2 - 800*beta - 512)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + 3*(84*alpha**3*beta**3 + 156*alpha**3*beta**2 + 24*alpha**3*beta - 16*alpha**3 + 108*alpha**2*beta**4 + 780*alpha**2*beta**3 + 1104*alpha**2*beta**2 
+ 160*alpha**2*beta - 96*alpha**2 + 504*alpha*beta**4 + 2280*alpha*beta**3 + 2624*alpha*beta**2 + 352*alpha*beta - 192*alpha + 576*beta**4 + 2112*beta**3 + 2080*beta**2 + 256*beta - 128)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**2) + 2*(28*alpha**3*beta**2 + 60*alpha**3*beta + 24*alpha**3 + 36*alpha**2*beta**3 + 252*alpha**2*beta**2 + 400*alpha**2*beta + 144*alpha**2 + 144*alpha*beta**3 + 672*alpha*beta**2 + 880*alpha*beta + 288*alpha + 144*beta**3 + 560*beta**2 + 640*beta + 192)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 
+ 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)*(x) + 0 )
def d9_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + 8*(2*alpha - beta + 10)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 
88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + 7*(alpha**2 - 2*alpha*beta + 16*alpha - 10*beta + 41)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta + 6*alpha**2 - 16*alpha*beta + 50*alpha - 41*beta + 88)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + 5*(-6*alpha**2*beta + 13*alpha**2 - 50*alpha*beta + 76*alpha - 88*beta + 104)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + 4*(-13*alpha**2*beta + 12*alpha**2 - 76*alpha*beta + 56*alpha - 104*beta + 64)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 
+ 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 3*(-12*alpha**2*beta + 4*alpha**2 - 56*alpha*beta + 16*alpha - 64*beta + 
16)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**2) + 2*(-4*alpha**2 - 16*alpha - 16)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 
+ 104*beta**3 + 64*beta**2 + 16*beta)*(x) + 0 )

print("def d0_horner(x, alpha, beta) -> float:\n    return (", horner(d0(x, alpha, beta)), ")\n")
print("def d1_horner(x, alpha, beta) -> float:\n    return (", horner(d1(x, alpha, beta)), ")\n")
print("def d2_horner(x, alpha, beta) -> float:\n    return (", horner(d2(x, alpha, beta)), ")\n")
print("def d3_horner(x, alpha, beta) -> float:\n    return (", horner(d3(x, alpha, beta)), ")\n")
print("def d4_horner(x, alpha, beta) -> float:\n    return (", horner(d4(x, alpha, beta)), ")\n")
print("def d5_horner(x, alpha, beta) -> float:\n    return (", horner(d5(x, alpha, beta)), ")\n")
print("def d6_horner(x, alpha, beta) -> float:\n    return (", horner(d6(x, alpha, beta)), ")\n")
print("def d7_horner(x, alpha, beta) -> float:\n    return (", horner(d7(x, alpha, beta)), ")\n")
print("def d8_horner(x, alpha, beta) -> float:\n    return (", horner(d8(x, alpha, beta)), ")\n")
print("def d9_horner(x, alpha, beta) -> float:\n    return (", horner(d9(x, alpha, beta)), ")\n")

print("def d0_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d0_prime(x, alpha, beta)), ")\n")
print("def d1_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d1_prime(x, alpha, beta)), ")\n")
print("def d2_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d2_prime(x, alpha, beta)), ")\n")
print("def d3_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d3_prime(x, alpha, beta)), ")\n")
print("def d4_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d4_prime(x, alpha, beta)), ")\n")
print("def d5_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d5_prime(x, alpha, beta)), ")\n")
print("def d6_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d6_prime(x, alpha, beta)), ")\n")
print("def d7_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d7_prime(x, alpha, beta)), ")\n")
print("def d8_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d8_prime(x, alpha, beta)), ")\n")
print("def d9_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d9_prime(x, alpha, beta)), ")\n")