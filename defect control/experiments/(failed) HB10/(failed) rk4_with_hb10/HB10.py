
from math import cos, pi
from scipy.interpolate import BarycentricInterpolator

def get_Chebyshev_nodes(a, b, n):
    res = []
    for k in range(1, n+1):
        res.append(
            (a+b)/2 + (b-a)/2 * cos( (2*k - 1) / (2*n) * pi)
        )
    return res

class ContinuousSolution:
    def __init__(self) -> None:
        self.interps = []
    
    def eval(self, x) -> float:
        for hb in self.interps:
            if (hb.x_i <= x <= hb.x_i_plus_1):
                return hb.eval(x)

        first_hb = self.interps[0]
        if (first_hb.x_i_minus_2 <= x <= first_hb.x_i):
            return first_hb.eval(x)
        print(f"ERROR: {x} is outside of the solution range: {first_hb.x_i_minus_2} <= x <= {self.interps[-1].x_i_plus_1}")
        return -1

    def prime(self, x) -> float:
        for hb in self.interps:
            if (hb.x_i <= x <= hb.x_i_plus_1):
                return hb.prime(x)

        first_hb = self.interps[0]
        if (first_hb.x_i_minus_2 <= x <= first_hb.x_i):
            return first_hb.prime(x)
        
        print(f"ERROR: {x} is outside of the solution range: {first_hb.x_i_minus_2} <= x <= {self.interps[-1].x_i_plus_1}")
        return -1
    
    def append(self, interp) -> None:
        self.interps.append(interp)

    def extend(self, newInterps) -> None:
        self.interps.extend(newInterps)


def create_continuous_sol_from_results(res, fn_s, monitor):
    interps = []
    for i in range(len(res) - 4):
        x_i_minus_2, y_i_minus_2     = res[i]    
        x_i_minus_1, y_i_minus_1     = res[i + 1]    
        x_i_minus_0_5, y_i_minus_0_5 = res[i + 2] # I WANT TO CACHE the middle evaluations now 
        x_i, y_i                     = res[i + 3]    
        x_i_plus_1, y_i_plus_1       = res[i + 4]

        f_i_minus_2   = fn_s[i]    
        f_i_minus_1   = fn_s[i + 1]    
        f_i_minus_0_5 = fn_s[i + 2]  # I WANT TO CACHE the middle evaluations now    
        f_i           = fn_s[i + 3]    
        f_i_plus_1    = fn_s[i + 4]
        
        interps.append(
            HB (
            x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
            y_i_minus_2, f_i_minus_2,
            y_i_minus_1, f_i_minus_1,
            y_i_minus_0_5, f_i_minus_0_5,
            y_i, f_i,
            y_i_plus_1, f_i_plus_1,
            monitor
            )
        )
    continuous_sol = ContinuousSolution()
    continuous_sol.extend(interps)
    return continuous_sol

def create_defect_samplings(res, fn_s, monitor):
    result = []
    for i in range(len(res) - 4):
        x_i_minus_2, y_i_minus_2     = res[i]    
        x_i_minus_1, y_i_minus_1     = res[i + 1]    
        x_i_minus_0_5, y_i_minus_0_5 = res[i + 2] # I WANT TO CACHE the middle evaluations now 
        x_i, y_i                     = res[i + 3]    
        x_i_plus_1, y_i_plus_1       = res[i + 4]

        f_i_minus_2   = fn_s[i]    
        f_i_minus_1   = fn_s[i + 1]    
        f_i_minus_0_5 = fn_s[i + 2]  # I WANT TO CACHE the middle evaluations now    
        f_i           = fn_s[i + 3]    
        f_i_plus_1    = fn_s[i + 4]
        
        interp = HB (
            x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
            y_i_minus_2, f_i_minus_2,
            y_i_minus_1, f_i_minus_1,
            y_i_minus_0_5, f_i_minus_0_5,
            y_i, f_i,
            y_i_plus_1, f_i_plus_1,
            monitor
        )
        result.append( (x_i_minus_1, x_i, x_i_plus_1, interp) )
    return result
        
##########################################################################################################################################
def d0(x, alpha, beta):
    return ( (8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 
+ 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**9) 
+ (9*alpha**4 - 9*alpha**3*beta + 99*alpha**3 - 12*alpha**2*beta**2 + 3*alpha**2*beta + 280*alpha**2 - 24*alpha*beta**2 + 38*alpha*beta + 268*alpha - 8*beta**2 + 16*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + (-18*alpha**4*beta + 54*alpha**4 - 6*alpha**3*beta**2 - 156*alpha**3*beta + 410*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 320*alpha**2*beta + 990*alpha**2 + 12*alpha*beta**3 - 172*alpha*beta**2 - 200*alpha*beta + 872*alpha + 4*beta**3 - 56*beta**2 - 28*beta + 200)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 
+ alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + (9*alpha**4*beta**2 - 108*alpha**4*beta + 117*alpha**4 + 7*alpha**3*beta**3 + 15*alpha**3*beta**2 - 729*alpha**3*beta + 759*alpha**3 + 63*alpha**2*beta**3 - 200*alpha**2*beta**2 - 1557*alpha**2*beta + 1660*alpha**2 + 102*alpha*beta**3 - 404*alpha*beta**2 - 1210*alpha*beta + 1372*alpha + 32*beta**3 - 136*beta**2 - 248*beta + 304)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + (54*alpha**4*beta**2 - 234*alpha**4*beta + 108*alpha**4 + 42*alpha**3*beta**3 + 228*alpha**3*beta**2 - 1434*alpha**3*beta + 644*alpha**3 + 240*alpha**2*beta**3 + 144*alpha**2*beta**2 - 2972*alpha**2*beta + 1320*alpha**2 + 336*alpha*beta**3 - 196*alpha*beta**2 - 2336*alpha*beta + 1040*alpha + 100*beta**3 - 104*beta**2 - 496*beta + 224)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + (117*alpha**4*beta**2 - 216*alpha**4*beta + 36*alpha**4 + 91*alpha**3*beta**3 + 591*alpha**3*beta**2 - 1260*alpha**3*beta + 204*alpha**3 + 423*alpha**2*beta**3 + 964*alpha**2*beta**2 - 2532*alpha**2*beta + 400*alpha**2 + 534*alpha*beta**3 + 556*alpha*beta**2 - 1960*alpha*beta + 304*alpha + 152*beta**3 + 80*beta**2 - 416*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + (108*alpha**4*beta**2 - 72*alpha**4*beta + 84*alpha**3*beta**3 + 588*alpha**3*beta**2 - 408*alpha**3*beta + 348*alpha**2*beta**3 + 1104*alpha**2*beta**2 - 800*alpha**2*beta + 408*alpha*beta**3 + 800*alpha*beta**2 - 608*alpha*beta + 112*beta**3 + 160*beta**2 - 128*beta)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + (36*alpha**3*beta**2 + 28*alpha**2*beta**3 + 132*alpha**2*beta**2 + 52*alpha*beta**3 + 136*alpha*beta**2 + 16*beta**3 + 32*beta**2)/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 0*(x) + 0 )
def d1(x, alpha, beta):
    return ( 1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - 2*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (-2*alpha*beta + 6*alpha + beta**2 - 16*beta + 25)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (alpha*beta**2 
- 12*alpha*beta + 13*alpha + 8*beta**2 - 50*beta + 38)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (6*alpha*beta**2 - 26*alpha*beta + 12*alpha + 25*beta**2 - 76*beta + 28)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 38*beta**2 - 56*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + (12*alpha*beta**2 - 8*alpha*beta + 28*beta**2 - 16*beta)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 4*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**2) + 0*(x) + 0 )   
def d2(x, alpha, beta):
    return ( (3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**9) + (6*alpha**2*beta 
+ 16*alpha**2 - 6*alpha*beta**2 + 5*alpha*beta + 58*alpha + 4*beta**2 - 8*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + (3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 + 4*alpha**2*beta + 96*alpha**2 + 3*alpha*beta**3 - 34*alpha*beta**2 - 59*alpha*beta + 164*alpha - 2*beta**3 + 28*beta**2 + 14*beta - 100)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + (-6*alpha**3*beta**2 - 3*alpha**3*beta + 34*alpha**3 + 6*alpha**2*beta**3 - 56*alpha**2*beta**2 - 114*alpha**2*beta + 208*alpha**2 + 21*alpha*beta**3 - 56*alpha*beta**2 - 253*alpha*beta + 226*alpha - 16*beta**3 + 68*beta**2 + 124*beta - 152)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + (3*alpha**3*beta**3 - 18*alpha**3*beta**2 - 51*alpha**3*beta + 44*alpha**3 + 36*alpha**2*beta**3 - 60*alpha**2*beta**2 - 344*alpha**2*beta + 192*alpha**2 + 57*alpha*beta**3 + 14*alpha*beta**2 - 404*alpha*beta + 152*alpha - 50*beta**3 + 52*beta**2 + 248*beta - 112)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + (13*alpha**3*beta**3 - 81*alpha**3*beta + 18*alpha**3 + 78*alpha**2*beta**3 + 64*alpha**2*beta**2 - 360*alpha**2*beta + 64*alpha**2 + 75*alpha*beta**3 + 130*alpha*beta**2 - 292*alpha*beta + 40*alpha - 76*beta**3 - 40*beta**2 + 208*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + (17*alpha**3*beta**3 + 30*alpha**3*beta**2 - 36*alpha**3*beta + 72*alpha**2*beta**3 + 144*alpha**2*beta**2 - 128*alpha**2*beta + 48*alpha*beta**3 + 128*alpha*beta**2 - 80*alpha*beta - 56*beta**3 - 80*beta**2 + 64*beta)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + (7*alpha**3*beta**3 + 18*alpha**3*beta**2 + 24*alpha**2*beta**3 + 64*alpha**2*beta**2 + 12*alpha*beta**3 + 40*alpha*beta**2 - 16*beta**3 - 32*beta**2)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 0*(x) + 0 )
def d3(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**8) + (alpha**2 - 4*alpha*beta + 12*alpha + beta**2 - 16*beta + 25)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (-alpha**2*beta + 2*alpha**2 + alpha*beta**2 - 12*alpha*beta + 13*alpha + 4*beta**2 - 25*beta + 19)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**6) + (alpha**2*beta**2 - 8*alpha**2*beta + 5*alpha**2 + 12*alpha*beta**2 - 52*alpha*beta + 24*alpha + 25*beta**2 - 76*beta + 28)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (2*alpha**2*beta**2 - 5*alpha**2*beta + alpha**2 + 13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 19*beta**2 - 28*beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**4) + (5*alpha**2*beta**2 - 4*alpha**2*beta + 24*alpha*beta**2 - 16*alpha*beta + 28*beta**2 - 16*beta)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**2) + 0*(x) + 0 )
def d4(x, alpha, beta):
    return ( (2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**9) + (4*alpha**2 - 7*alpha*beta 
+ 19*alpha + 4*beta**2 - 17*beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + (2*alpha**3 - 8*alpha**2*beta + 30*alpha**2 + 8*alpha*beta**2 - 56*alpha*beta + 74*alpha - 2*beta**3 + 34*beta**2 - 58*beta + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + (-3*alpha**3*beta + 11*alpha**3 + 4*alpha**2*beta**2 - 57*alpha**2*beta + 85*alpha**2 - 3*alpha*beta**3 
+ 55*alpha*beta**2 - 184*alpha*beta + 148*alpha - 17*beta**3 + 113*beta**2 - 104*beta + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 
3*beta**2 + 3*beta + 1)*(x**6) + (-18*alpha**3*beta + 20*alpha**3 + 24*alpha**2*beta**2 - 158*alpha**2*beta + 108*alpha**2 - 18*alpha*beta**3 + 146*alpha*beta**2 - 320*alpha*beta + 152*alpha - 56*beta**3 + 184*beta**2 - 112*beta + 32)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 
+ 3*beta + 1)*(x**5) + (alpha**3*beta**3 + 3*alpha**3*beta**2 - 36*alpha**3*beta + 12*alpha**3 + 3*alpha**2*beta**3 + 61*alpha**2*beta**2 - 204*alpha**2*beta + 52*alpha**2 - 36*alpha*beta**3 + 196*alpha*beta**2 - 304*alpha*beta + 64*alpha - 88*beta**3 + 152*beta**2 - 80*beta + 16)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 
+ 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + (4*alpha**3*beta**3 + 12*alpha**3*beta**2 - 24*alpha**3*beta + 12*alpha**2*beta**3 
+ 84*alpha**2*beta**2 - 104*alpha**2*beta - 24*alpha*beta**3 + 152*alpha*beta**2 - 128*alpha*beta - 64*beta**3 + 64*beta**2 - 32*beta)/(alpha**3*beta**3 
+ 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + (4*alpha**3*beta**3 + 12*alpha**3*beta**2 + 12*alpha**2*beta**3 + 52*alpha**2*beta**2 + 64*alpha*beta**2 - 16*beta**3 + 16*beta**2)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 0*(x) + 0 )
def d5(x, alpha, beta):
    return ( 1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**9) + (2*alpha - 2*beta + 9)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + (alpha**2 - 4*alpha*beta + 14*alpha + beta**2 - 18*beta + 32)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + (-2*alpha**2*beta + 5*alpha**2 + 2*alpha*beta**2 - 28*alpha*beta + 36*alpha + 9*beta**2 - 64*beta + 56)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + (alpha**2*beta**2 - 10*alpha**2*beta + 8*alpha**2 + 14*alpha*beta**2 
- 72*alpha*beta + 40*alpha + 32*beta**2 - 112*beta + 48)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + (5*alpha**2*beta**2 - 16*alpha**2*beta + 4*alpha**2 + 36*alpha*beta**2 - 80*alpha*beta + 16*alpha + 56*beta**2 - 96*beta + 16)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + (8*alpha**2*beta**2 - 8*alpha**2*beta + 40*alpha*beta**2 - 32*alpha*beta + 48*beta**2 - 32*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + (4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 0*(x) + 0 )
def d6(x, alpha, beta):
    return ( (-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**9) + (-6*alpha**2*beta + 4*alpha**2 + 6*alpha*beta**2 - 49*alpha*beta + 28*alpha + 16*beta**2 - 86*beta + 40)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + (-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 62*alpha**2*beta + 36*alpha**2 - 3*alpha*beta**3 + 92*alpha*beta**2 - 293*alpha*beta + 146*alpha - 8*beta**3 + 160*beta**2 - 388*beta + 164)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**7) + (6*alpha**3*beta**2 - 21*alpha**3*beta + 12*alpha**3 - 6*alpha**2*beta**3 + 112*alpha**2*beta**2 - 252*alpha**2*beta + 124*alpha**2 - 45*alpha*beta**3 + 502*alpha*beta**2 - 883*alpha*beta + 376*alpha - 78*beta**3 + 656*beta**2 - 950*beta + 352)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + (-3*alpha**3*beta**3 + 36*alpha**3*beta**2 - 57*alpha**3*beta + 26*alpha**3 - 54*alpha**2*beta**3 + 396*alpha**2*beta**2 - 518*alpha**2*beta + 204*alpha**2 - 237*alpha*beta**3 + 1328*alpha*beta**2 - 1484*alpha*beta + 512*alpha - 308*beta**3 + 1408*beta**2 - 1360*beta + 416)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + (-17*alpha**3*beta**3 + 78*alpha**3*beta**2 - 75*alpha**3*beta + 24*alpha**3 - 180*alpha**2*beta**3 + 664*alpha**2*beta**2 - 570*alpha**2*beta + 160*alpha**2 - 591*alpha*beta**3 + 1840*alpha*beta**2 - 1408*alpha*beta + 352*alpha - 622*beta**3 + 1664*beta**2 - 1136*beta + 256)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + (-33*alpha**3*beta**3 + 72*alpha**3*beta**2 - 48*alpha**3*beta + 8*alpha**3 - 270*alpha**2*beta**3 + 528*alpha**2*beta**2 - 320*alpha**2*beta + 48*alpha**2 - 732*alpha*beta**3 + 1280*alpha*beta**2 - 704*alpha*beta + 96*alpha - 656*beta**3 + 1024*beta**2 - 512*beta + 64)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + (-23*alpha**2*beta**2 + 24*alpha**2*beta - 12*alpha**2 - 116*alpha*beta**2 + 112*alpha*beta - 48*alpha - 152*beta**2 + 128*beta - 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 0*(x) + 1 )
def d7(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**9) + (alpha - beta + 5)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**8) + (alpha**2 - 4*alpha*beta + 16*alpha + beta**2 - 20*beta + 41)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + (-alpha**2*beta + 3*alpha**2 + alpha*beta**2 - 16*alpha*beta + 25*alpha + 5*beta**2 - 41*beta + 44)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**6) + (alpha**2*beta**2 - 12*alpha**2*beta + 13*alpha**2 + 16*alpha*beta**2 - 100*alpha*beta + 76*alpha + 41*beta**2 - 176*beta + 104)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + (3*alpha**2*beta**2 - 13*alpha**2*beta + 6*alpha**2 + 25*alpha*beta**2 - 76*alpha*beta + 28*alpha + 44*beta**2 - 104*beta + 32)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**4) + (13*alpha**2*beta**2 - 24*alpha**2*beta + 4*alpha**2 + 76*alpha*beta**2 - 112*alpha*beta + 16*alpha + 104*beta**2 - 128*beta + 16)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + (3*alpha*beta - 2*alpha + 8*beta - 4)/(alpha*beta + 2*beta)*(x**2) + 1*(x) + 0 )
def d8(x, alpha, beta):
    return ( (-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**9) + (-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 105*alpha*beta**2 - 178*alpha*beta - 56*alpha + 9*beta**4 - 45*beta**3 - 260*beta**2 - 308*beta - 80)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 212*alpha**2*beta - 72*alpha**2 + 18*alpha*beta**4 + 12*alpha*beta**3 - 496*alpha*beta**2 - 920*alpha*beta - 292*alpha + 90*beta**4 + 22*beta**3 - 
830*beta**2 - 1192*beta - 328)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + (7*alpha**3*beta**3 - 21*alpha**3*beta**2 - 66*alpha**3*beta - 24*alpha**3 
+ 9*alpha**2*beta**4 + 99*alpha**2*beta**3 - 200*alpha**2*beta**2 - 684*alpha**2*beta - 248*alpha**2 + 144*alpha*beta**4 + 447*alpha*beta**3 - 773*alpha*beta**2 - 2218*alpha*beta - 752*alpha + 369*beta**4 + 731*beta**3 - 1000*beta**2 - 2324*beta - 704)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + 
beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + (42*alpha**3*beta**3 + 12*alpha**3*beta**2 - 120*alpha**3*beta - 52*alpha**3 + 54*alpha**2*beta**4 + 456*alpha**2*beta**3 + 144*alpha**2*beta**2 - 956*alpha**2*beta - 408*alpha**2 + 450*alpha*beta**4 + 1758*alpha*beta**3 + 416*alpha*beta**2 - 2552*alpha*beta - 1024*alpha + 792*beta**4 + 2248*beta**3 + 400*beta**2 - 2272*beta - 832)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 
+ 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + (91*alpha**3*beta**3 + 123*alpha**3*beta**2 - 66*alpha**3*beta - 48*alpha**3 + 117*alpha**2*beta**4 + 891*alpha**2*beta**3 + 964*alpha**2*beta**2 - 444*alpha**2*beta - 320*alpha**2 + 684*alpha*beta**4 + 2940*alpha*beta**3 + 2536*alpha*beta**2 - 1024*alpha*beta - 704*alpha + 936*beta**4 + 3128*beta**3 + 2240*beta**2 - 800*beta - 512)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + (84*alpha**3*beta**3 + 156*alpha**3*beta**2 + 24*alpha**3*beta - 16*alpha**3 + 108*alpha**2*beta**4 + 780*alpha**2*beta**3 + 1104*alpha**2*beta**2 + 160*alpha**2*beta - 96*alpha**2 + 504*alpha*beta**4 + 2280*alpha*beta**3 + 2624*alpha*beta**2 + 352*alpha*beta - 192*alpha + 576*beta**4 + 2112*beta**3 + 2080*beta**2 + 256*beta - 128)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 
240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 
+ 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + (28*alpha**3*beta**2 + 60*alpha**3*beta + 24*alpha**3 + 36*alpha**2*beta**3 + 252*alpha**2*beta**2 + 400*alpha**2*beta + 144*alpha**2 + 144*alpha*beta**3 + 672*alpha*beta**2 + 880*alpha*beta + 288*alpha + 144*beta**3 + 560*beta**2 + 640*beta + 192)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 + 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)*(x**2) + 0*(x) + 0 )
def d9(x, alpha, beta):
    return ( 1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**9) + (2*alpha - beta + 10)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 
2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + (alpha**2 - 2*alpha*beta + 16*alpha - 10*beta + 41)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + (-alpha**2*beta + 6*alpha**2 - 16*alpha*beta + 50*alpha - 41*beta + 88)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 
104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + (-6*alpha**2*beta + 13*alpha**2 - 50*alpha*beta + 76*alpha - 88*beta + 104)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + (-13*alpha**2*beta 
+ 12*alpha**2 - 76*alpha*beta + 56*alpha - 104*beta + 64)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + (-12*alpha**2*beta + 4*alpha**2 - 56*alpha*beta + 16*alpha - 64*beta + 16)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 
(-4*alpha**2 - 16*alpha - 16)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 + 104*beta**3 + 
64*beta**2 + 16*beta)*(x**2) + 0*(x) + 0 )
def d0_prime(x, alpha, beta):
    return ( 9*(8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + 8*(9*alpha**4 - 9*alpha**3*beta + 99*alpha**3 - 12*alpha**2*beta**2 + 3*alpha**2*beta + 280*alpha**2 - 24*alpha*beta**2 + 38*alpha*beta + 268*alpha - 8*beta**2 + 16*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 
+ 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 
8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + 7*(-18*alpha**4*beta + 54*alpha**4 - 6*alpha**3*beta**2 - 156*alpha**3*beta + 410*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 320*alpha**2*beta + 990*alpha**2 + 12*alpha*beta**3 - 172*alpha*beta**2 - 200*alpha*beta + 872*alpha + 4*beta**3 - 56*beta**2 - 28*beta + 200)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + 6*(9*alpha**4*beta**2 - 108*alpha**4*beta + 117*alpha**4 + 7*alpha**3*beta**3 + 15*alpha**3*beta**2 - 729*alpha**3*beta + 759*alpha**3 + 63*alpha**2*beta**3 - 200*alpha**2*beta**2 - 1557*alpha**2*beta + 1660*alpha**2 + 102*alpha*beta**3 - 404*alpha*beta**2 - 1210*alpha*beta + 1372*alpha + 32*beta**3 - 136*beta**2 - 248*beta + 304)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 
377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + 5*(54*alpha**4*beta**2 - 234*alpha**4*beta + 108*alpha**4 + 42*alpha**3*beta**3 + 228*alpha**3*beta**2 - 1434*alpha**3*beta + 644*alpha**3 + 240*alpha**2*beta**3 + 144*alpha**2*beta**2 - 2972*alpha**2*beta + 1320*alpha**2 + 336*alpha*beta**3 - 196*alpha*beta**2 - 2336*alpha*beta + 1040*alpha + 100*beta**3 - 104*beta**2 - 496*beta + 224)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + 4*(117*alpha**4*beta**2 - 216*alpha**4*beta + 36*alpha**4 + 91*alpha**3*beta**3 + 591*alpha**3*beta**2 - 1260*alpha**3*beta + 204*alpha**3 + 423*alpha**2*beta**3 + 964*alpha**2*beta**2 - 2532*alpha**2*beta + 400*alpha**2 + 534*alpha*beta**3 + 556*alpha*beta**2 - 1960*alpha*beta + 304*alpha + 152*beta**3 + 80*beta**2 - 416*beta + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + 3*(108*alpha**4*beta**2 - 72*alpha**4*beta + 84*alpha**3*beta**3 + 588*alpha**3*beta**2 - 408*alpha**3*beta + 348*alpha**2*beta**3 + 1104*alpha**2*beta**2 - 800*alpha**2*beta + 408*alpha*beta**3 + 800*alpha*beta**2 - 608*alpha*beta + 112*beta**3 + 160*beta**2 - 128*beta)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 2*(36*alpha**3*beta**2 + 28*alpha**2*beta**3 + 132*alpha**2*beta**2 + 52*alpha*beta**3 + 136*alpha*beta**2 + 16*beta**3 + 32*beta**2)/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x) + 0 )
def d1_prime(x, alpha, beta):
    return ( 9*1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 
88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - 2*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 
6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(-2*alpha*beta + 6*alpha + beta**2 - 16*beta + 25)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(alpha*beta**2 - 12*alpha*beta + 13*alpha + 8*beta**2 - 50*beta + 38)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(6*alpha*beta**2 - 26*alpha*beta + 12*alpha + 25*beta**2 - 76*beta + 28)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 38*beta**2 - 56*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 3*(12*alpha*beta**2 - 8*alpha*beta + 28*beta**2 - 16*beta)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*4*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x) + 0 )
def d2_prime(x, alpha, beta):
    return ( 9*(3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + 8*(6*alpha**2*beta + 16*alpha**2 - 6*alpha*beta**2 + 5*alpha*beta + 58*alpha + 4*beta**2 - 8*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + 7*(3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 + 4*alpha**2*beta + 96*alpha**2 + 3*alpha*beta**3 - 34*alpha*beta**2 - 59*alpha*beta + 164*alpha - 2*beta**3 + 28*beta**2 + 14*beta - 100)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + 6*(-6*alpha**3*beta**2 - 3*alpha**3*beta + 34*alpha**3 + 6*alpha**2*beta**3 - 56*alpha**2*beta**2 - 114*alpha**2*beta + 208*alpha**2 + 21*alpha*beta**3 - 56*alpha*beta**2 - 253*alpha*beta + 226*alpha - 16*beta**3 + 68*beta**2 + 124*beta - 152)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + 5*(3*alpha**3*beta**3 - 18*alpha**3*beta**2 - 51*alpha**3*beta + 44*alpha**3 + 36*alpha**2*beta**3 - 60*alpha**2*beta**2 - 344*alpha**2*beta + 192*alpha**2 + 57*alpha*beta**3 + 14*alpha*beta**2 - 404*alpha*beta + 152*alpha - 50*beta**3 + 52*beta**2 + 248*beta - 112)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + 4*(13*alpha**3*beta**3 - 81*alpha**3*beta + 18*alpha**3 + 78*alpha**2*beta**3 + 64*alpha**2*beta**2 - 360*alpha**2*beta + 64*alpha**2 + 75*alpha*beta**3 + 130*alpha*beta**2 - 292*alpha*beta + 40*alpha - 76*beta**3 - 40*beta**2 + 208*beta - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + 3*(17*alpha**3*beta**3 + 30*alpha**3*beta**2 - 36*alpha**3*beta + 72*alpha**2*beta**3 + 144*alpha**2*beta**2 - 128*alpha**2*beta + 48*alpha*beta**3 + 128*alpha*beta**2 - 80*alpha*beta - 56*beta**3 - 80*beta**2 + 64*beta)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 2*(7*alpha**3*beta**3 + 18*alpha**3*beta**2 + 24*alpha**2*beta**3 + 
64*alpha**2*beta**2 + 12*alpha*beta**3 + 40*alpha*beta**2 - 16*beta**3 - 32*beta**2)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x) + 0 )
def d3_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 12*alpha + beta**2 - 16*beta + 25)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(-alpha**2*beta + 2*alpha**2 + alpha*beta**2 - 12*alpha*beta + 13*alpha + 4*beta**2 - 25*beta + 19)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**5) + 5*(alpha**2*beta**2 - 8*alpha**2*beta + 5*alpha**2 + 12*alpha*beta**2 - 52*alpha*beta + 24*alpha + 25*beta**2 - 76*beta + 28)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(2*alpha**2*beta**2 - 5*alpha**2*beta + alpha**2 + 13*alpha*beta**2 - 24*alpha*beta + 4*alpha + 19*beta**2 - 28*beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x**3) + 3*(5*alpha**2*beta**2 - 4*alpha**2*beta + 24*alpha*beta**2 - 16*alpha*beta + 28*beta**2 - 16*beta)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)*(x) + 0 )
def d4_prime(x, alpha, beta):
    return ( 9*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + 8*(4*alpha**2 - 7*alpha*beta + 19*alpha + 4*beta**2 - 17*beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + 7*(2*alpha**3 - 8*alpha**2*beta + 30*alpha**2 + 8*alpha*beta**2 - 56*alpha*beta + 74*alpha - 2*beta**3 + 34*beta**2 - 58*beta + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 
+ 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta 
+ 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + 6*(-3*alpha**3*beta + 11*alpha**3 + 4*alpha**2*beta**2 - 57*alpha**2*beta + 85*alpha**2 - 3*alpha*beta**3 + 55*alpha*beta**2 - 184*alpha*beta + 148*alpha - 17*beta**3 + 113*beta**2 - 104*beta + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + 5*(-18*alpha**3*beta + 20*alpha**3 + 24*alpha**2*beta**2 - 158*alpha**2*beta + 108*alpha**2 - 18*alpha*beta**3 + 146*alpha*beta**2 - 320*alpha*beta + 152*alpha - 56*beta**3 + 184*beta**2 - 112*beta + 32)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 
3*beta**2 + 3*beta + 1)*(x**4) + 4*(alpha**3*beta**3 + 3*alpha**3*beta**2 - 36*alpha**3*beta + 12*alpha**3 + 3*alpha**2*beta**3 + 61*alpha**2*beta**2 - 204*alpha**2*beta + 52*alpha**2 - 36*alpha*beta**3 + 196*alpha*beta**2 - 304*alpha*beta + 64*alpha - 88*beta**3 + 152*beta**2 - 80*beta + 16)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + 3*(4*alpha**3*beta**3 + 12*alpha**3*beta**2 - 24*alpha**3*beta + 12*alpha**2*beta**3 + 84*alpha**2*beta**2 - 104*alpha**2*beta - 24*alpha*beta**3 + 152*alpha*beta**2 - 128*alpha*beta - 64*beta**3 + 64*beta**2 - 32*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 2*(4*alpha**3*beta**3 + 12*alpha**3*beta**2 + 12*alpha**2*beta**3 + 52*alpha**2*beta**2 + 64*alpha*beta**2 - 16*beta**3 + 16*beta**2)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 
1)*(x) + 0 )
def d5_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + 8*(2*alpha - 
2*beta + 9)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 14*alpha + beta**2 - 18*beta + 32)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + 6*(-2*alpha**2*beta + 5*alpha**2 + 2*alpha*beta**2 - 28*alpha*beta + 36*alpha + 9*beta**2 - 64*beta + 56)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + 5*(alpha**2*beta**2 - 10*alpha**2*beta + 8*alpha**2 + 14*alpha*beta**2 - 72*alpha*beta + 40*alpha + 32*beta**2 - 112*beta + 48)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) + 4*(5*alpha**2*beta**2 - 16*alpha**2*beta + 4*alpha**2 + 36*alpha*beta**2 - 80*alpha*beta + 16*alpha + 56*beta**2 - 96*beta + 16)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + 3*(8*alpha**2*beta**2 - 8*alpha**2*beta + 40*alpha*beta**2 - 32*alpha*beta + 48*beta**2 - 32*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 2*(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x) + 0 )
def d6_prime(x, alpha, beta):
    return ( 9*(-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + 8*(-6*alpha**2*beta + 4*alpha**2 + 6*alpha*beta**2 - 49*alpha*beta + 28*alpha + 16*beta**2 - 86*beta + 40)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 
+ 32*beta**3)*(x**7) + 7*(-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 62*alpha**2*beta + 36*alpha**2 - 3*alpha*beta**3 + 92*alpha*beta**2 - 293*alpha*beta + 146*alpha - 8*beta**3 + 160*beta**2 - 388*beta + 164)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + 6*(6*alpha**3*beta**2 - 21*alpha**3*beta + 12*alpha**3 - 6*alpha**2*beta**3 + 112*alpha**2*beta**2 - 252*alpha**2*beta + 124*alpha**2 - 45*alpha*beta**3 + 502*alpha*beta**2 - 883*alpha*beta + 376*alpha - 78*beta**3 + 656*beta**2 - 950*beta + 352)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + 5*(-3*alpha**3*beta**3 + 36*alpha**3*beta**2 - 57*alpha**3*beta + 26*alpha**3 - 54*alpha**2*beta**3 + 396*alpha**2*beta**2 - 518*alpha**2*beta + 204*alpha**2 - 237*alpha*beta**3 + 1328*alpha*beta**2 - 1484*alpha*beta + 512*alpha - 308*beta**3 + 1408*beta**2 - 1360*beta + 416)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + 4*(-17*alpha**3*beta**3 + 78*alpha**3*beta**2 - 75*alpha**3*beta + 24*alpha**3 - 180*alpha**2*beta**3 + 664*alpha**2*beta**2 - 570*alpha**2*beta + 160*alpha**2 - 591*alpha*beta**3 + 1840*alpha*beta**2 - 1408*alpha*beta + 352*alpha - 622*beta**3 + 1664*beta**2 - 1136*beta + 256)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + 3*(-33*alpha**3*beta**3 + 72*alpha**3*beta**2 - 48*alpha**3*beta + 8*alpha**3 - 270*alpha**2*beta**3 + 528*alpha**2*beta**2 - 320*alpha**2*beta + 48*alpha**2 - 732*alpha*beta**3 + 1280*alpha*beta**2 - 704*alpha*beta + 96*alpha - 656*beta**3 + 1024*beta**2 - 512*beta + 64)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**2) + 2*(-23*alpha**2*beta**2 + 24*alpha**2*beta - 12*alpha**2 - 116*alpha*beta**2 + 112*alpha*beta - 48*alpha - 152*beta**2 
+ 128*beta - 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x) + 0 )
def d7_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + 8*(alpha - beta + 5)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + 16*alpha + beta**2 - 20*beta + 41)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta + 
3*alpha**2 + alpha*beta**2 - 16*alpha*beta + 25*alpha + 5*beta**2 - 41*beta + 44)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**5) + 5*(alpha**2*beta**2 - 12*alpha**2*beta + 13*alpha**2 + 16*alpha*beta**2 - 100*alpha*beta + 76*alpha + 41*beta**2 - 176*beta + 104)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + 4*(3*alpha**2*beta**2 - 13*alpha**2*beta + 6*alpha**2 + 25*alpha*beta**2 - 76*alpha*beta + 28*alpha + 44*beta**2 - 104*beta 
+ 32)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)*(x**3) + 3*(13*alpha**2*beta**2 - 24*alpha**2*beta + 4*alpha**2 + 76*alpha*beta**2 - 112*alpha*beta + 16*alpha + 104*beta**2 - 128*beta + 16)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 2*(3*alpha*beta - 2*alpha + 8*beta - 4)/(alpha*beta + 2*beta)*(x) + 1 )
def d8_prime(x, alpha, beta):
    return ( 9*(-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + 8*(-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 105*alpha*beta**2 - 178*alpha*beta - 56*alpha + 9*beta**4 - 45*beta**3 - 260*beta**2 - 308*beta - 80)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 
1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + 7*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 96*alpha**2*beta**2 - 212*alpha**2*beta - 72*alpha**2 + 18*alpha*beta**4 + 12*alpha*beta**3 - 496*alpha*beta**2 - 920*alpha*beta - 292*alpha + 90*beta**4 + 22*beta**3 - 830*beta**2 - 1192*beta - 328)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + 6*(7*alpha**3*beta**3 - 21*alpha**3*beta**2 - 66*alpha**3*beta - 24*alpha**3 + 9*alpha**2*beta**4 + 99*alpha**2*beta**3 - 200*alpha**2*beta**2 - 684*alpha**2*beta - 248*alpha**2 + 144*alpha*beta**4 + 447*alpha*beta**3 - 773*alpha*beta**2 - 2218*alpha*beta - 752*alpha + 369*beta**4 + 731*beta**3 - 1000*beta**2 - 2324*beta - 704)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) 
+ 5*(42*alpha**3*beta**3 + 12*alpha**3*beta**2 - 120*alpha**3*beta - 52*alpha**3 + 54*alpha**2*beta**4 + 456*alpha**2*beta**3 + 144*alpha**2*beta**2 - 956*alpha**2*beta - 408*alpha**2 + 450*alpha*beta**4 + 1758*alpha*beta**3 + 416*alpha*beta**2 - 2552*alpha*beta - 1024*alpha + 792*beta**4 + 2248*beta**3 + 400*beta**2 - 2272*beta - 832)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + 4*(91*alpha**3*beta**3 + 123*alpha**3*beta**2 - 66*alpha**3*beta - 48*alpha**3 + 117*alpha**2*beta**4 + 891*alpha**2*beta**3 + 964*alpha**2*beta**2 - 444*alpha**2*beta - 320*alpha**2 + 684*alpha*beta**4 + 2940*alpha*beta**3 + 2536*alpha*beta**2 - 1024*alpha*beta - 704*alpha + 936*beta**4 + 3128*beta**3 + 2240*beta**2 - 800*beta - 512)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + 3*(84*alpha**3*beta**3 + 156*alpha**3*beta**2 + 24*alpha**3*beta - 16*alpha**3 + 108*alpha**2*beta**4 + 780*alpha**2*beta**3 + 1104*alpha**2*beta**2 
+ 160*alpha**2*beta - 96*alpha**2 + 504*alpha*beta**4 + 2280*alpha*beta**3 + 2624*alpha*beta**2 + 352*alpha*beta - 192*alpha + 576*beta**4 + 2112*beta**3 + 2080*beta**2 + 256*beta - 128)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**2) + 2*(28*alpha**3*beta**2 + 60*alpha**3*beta + 24*alpha**3 + 36*alpha**2*beta**3 + 252*alpha**2*beta**2 + 400*alpha**2*beta + 144*alpha**2 + 144*alpha*beta**3 + 672*alpha*beta**2 + 880*alpha*beta + 288*alpha + 144*beta**3 + 560*beta**2 + 640*beta + 192)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 
+ 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)*(x) + 0 )
def d9_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + 8*(2*alpha - beta + 10)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 
88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + 7*(alpha**2 - 2*alpha*beta + 16*alpha - 10*beta + 41)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta + 6*alpha**2 - 16*alpha*beta + 50*alpha - 41*beta + 88)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + 5*(-6*alpha**2*beta + 13*alpha**2 - 50*alpha*beta + 76*alpha - 88*beta + 104)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + 4*(-13*alpha**2*beta + 12*alpha**2 - 76*alpha*beta + 56*alpha - 104*beta + 64)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 
+ 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 3*(-12*alpha**2*beta + 4*alpha**2 - 56*alpha*beta + 16*alpha - 64*beta + 
16)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**2) + 2*(-4*alpha**2 - 16*alpha - 16)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 
+ 104*beta**3 + 64*beta**2 + 16*beta)*(x) + 0 )
#########################################################################################################

#########################################################################################################

def d0_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(alpha*(8*alpha + 6*beta + 30) + 12*beta + 32) + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 
+ 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 
36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3) + (alpha*(alpha*(alpha*(9*alpha - 9*beta + 99) + beta*(3 - 12*beta) + 280) + beta*(38 - 24*beta) + 268) + beta*(16 - 8*beta) + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(54 - 18*beta) + beta*(-6*beta - 156) + 410) + beta*(beta*(6*beta - 96) - 320) + 990) + beta*(beta*(12*beta - 172) - 200) + 872) + beta*(beta*(4*beta - 56) - 28) + 200)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 
+ 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(9*beta - 108) + 117) + beta*(beta*(7*beta + 15) - 729) + 759) + beta*(beta*(63*beta - 200) - 1557) + 1660) + beta*(beta*(102*beta - 404) - 1210) 
+ 1372) + beta*(beta*(32*beta - 136) - 248) + 304)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 
+ alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(54*beta - 234) + 108) + beta*(beta*(42*beta + 228) - 1434) + 644) + beta*(beta*(240*beta + 144) - 2972) + 1320) + beta*(beta*(336*beta - 196) - 2336) + 1040) + beta*(beta*(100*beta - 104) - 496) + 224)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(117*beta - 216) + 36) + beta*(beta*(91*beta + 591) - 1260) + 204) + beta*(beta*(423*beta + 964) - 2532) + 400) + beta*(beta*(534*beta + 556) - 1960) + 304) + beta*(beta*(152*beta + 80) - 
416) + 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*beta*(108*beta - 72) + beta*(beta*(84*beta + 588) - 408)) + beta*(beta*(348*beta + 1104) - 800)) + beta*(beta*(408*beta + 800) - 608)) + beta*(beta*(112*beta + 160) - 128))/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(36*alpha*beta**2 + beta**2*(28*beta + 132)) + beta**2*(52*beta + 136)) + beta**2*(16*beta + 32))/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) )

def d1_horner(x, alpha, beta) -> float:
    return ( x**2*(4*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2) + x*(x*(x*(x*(x*(x*(x/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (alpha - 2*beta + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(6 - 2*beta) + beta*(beta - 16) + 25)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(beta - 12) + 13) + beta*(8*beta - 50) + 38)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(6*beta - 26) + 12) + beta*(25*beta - 76) + 28)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(13*beta - 24) + 4) + beta*(38*beta - 56) + 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*beta*(12*beta - 8) + beta*(28*beta - 16))/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2))) )

def d2_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(3*beta + 8) - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3) + (alpha*(alpha*(6*beta + 16) + beta*(5 - 6*beta) + 58) + beta*(4*beta - 8) - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(3*beta + 8) + beta*(4 - 12*beta) + 96) + beta*(beta*(3*beta - 34) - 59) + 164) + beta*(beta*(28 - 2*beta) + 14) - 100)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(-6*beta - 3) + 34) + beta*(beta*(6*beta - 56) - 114) + 208) + beta*(beta*(21*beta - 56) - 253) + 226) + beta*(beta*(68 - 16*beta) + 124) - 152)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 
32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(3*beta - 18) - 51) + 44) + beta*(beta*(36*beta - 60) - 344) + 192) + beta*(beta*(57*beta + 14) - 404) + 152) + beta*(beta*(52 - 50*beta) + 248) - 112)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(13*beta**2 - 81) + 18) + beta*(beta*(78*beta + 64) - 360) + 64) + beta*(beta*(75*beta + 130) - 292) + 40) + beta*(beta*(-76*beta - 40) + 208) - 32)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*beta*(beta*(17*beta + 30) - 36) + beta*(beta*(72*beta + 
144) - 128)) + beta*(beta*(48*beta + 128) - 80)) + beta*(beta*(-56*beta - 80) + 64))/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*beta**2*(7*beta + 18) + beta**2*(24*beta + 64)) + beta**2*(12*beta + 40)) + beta**2*(-16*beta - 32))/(4*alpha**3*beta**3 
+ 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) )

def d3_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (alpha - beta + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) + (alpha*(alpha - 4*beta + 12) + beta*(beta - 16) + 25)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(2 - beta) + beta*(beta - 12) + 13) + beta*(4*beta - 25) + 19)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) + (alpha*(alpha*(beta*(beta - 8) + 5) + beta*(12*beta - 52) + 24) + beta*(25*beta - 76) + 28)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(2*beta - 5) + 1) + beta*(13*beta - 24) + 4) + beta*(19*beta - 28) + 4)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) + (alpha*(alpha*beta*(5*beta - 4) + beta*(24*beta - 16)) + 
beta*(28*beta - 16))/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*beta**2 + 4*beta**2) + 4*beta**2)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) )

def d4_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1) + (alpha*(4*alpha - 7*beta + 19) + beta*(4*beta - 17) + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(2*alpha - 8*beta + 30) + beta*(8*beta - 56) + 74) + beta*(beta*(34 - 2*beta) - 58) + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(11 - 3*beta) + beta*(4*beta - 57) + 85) + beta*(beta*(55 - 3*beta) - 184) + 148) + beta*(beta*(113 - 17*beta) - 104) + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(20 - 18*beta) + beta*(24*beta - 158) + 108) + beta*(beta*(146 - 18*beta) - 320) + 152) + beta*(beta*(184 - 56*beta) - 112) + 32)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(beta*(beta*(beta + 3) - 36) + 12) + beta*(beta*(3*beta + 61) - 204) + 52) + beta*(beta*(196 - 36*beta) - 304) + 64) + beta*(beta*(152 - 88*beta) - 80) + 16)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*beta*(beta*(4*beta + 12) - 24) + beta*(beta*(12*beta + 84) - 104)) + beta*(beta*(152 - 24*beta) - 128)) + beta*(beta*(64 - 64*beta) - 32))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*beta**2*(4*beta + 12) + beta**2*(12*beta 
+ 52)) + 64*beta**2) + beta**2*(16 - 16*beta))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) )

def d5_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1) 
+ (2*alpha - 2*beta + 9)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha - 4*beta + 14) + beta*(beta - 18) + 32)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(5 - 2*beta) + beta*(2*beta - 28) + 36) + beta*(9*beta - 64) + 56)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 
+ 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(beta - 10) + 8) + beta*(14*beta - 72) + 40) + beta*(32*beta - 112) + 48)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(5*beta - 16) + 4) + beta*(36*beta - 80) + 16) + beta*(56*beta - 96) + 16)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*beta*(8*beta - 8) + beta*(40*beta - 32)) + beta*(48*beta - 32))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(4*alpha*beta**2 + 16*beta**2) + 16*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) )

def d6_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(2 - 3*beta) - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3) + (alpha*(alpha*(4 - 6*beta) + beta*(6*beta - 49) + 28) + beta*(16*beta - 86) + 40)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(2 - 3*beta) + beta*(12*beta - 62) + 36) + beta*(beta*(92 - 3*beta) - 293) + 146) + beta*(beta*(160 - 8*beta) - 388) + 164)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(6*beta - 21) + 12) + beta*(beta*(112 - 6*beta) - 252) + 124) + beta*(beta*(502 - 45*beta) - 883) + 376) + beta*(beta*(656 - 78*beta) - 950) + 352)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(36 - 3*beta) - 57) + 26) + beta*(beta*(396 - 54*beta) - 518) + 204) + beta*(beta*(1328 - 237*beta) - 1484) + 512) + beta*(beta*(1408 - 308*beta) - 1360) + 416)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(78 - 17*beta) - 75) + 24) + beta*(beta*(664 - 180*beta) - 570) + 160) + beta*(beta*(1840 - 591*beta) - 1408) + 352) + beta*(beta*(1664 - 622*beta) - 1136) + 256)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(72 - 33*beta) - 48) + 8) + beta*(beta*(528 - 270*beta) - 320) + 48) + beta*(beta*(1280 - 732*beta) - 704) + 96) + beta*(beta*(1024 - 656*beta) - 512) + 64)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(beta*(24 - 23*beta) - 12) + beta*(112 - 116*beta) - 48) + beta*(128 
- 152*beta) - 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + 1 )

def d7_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(x/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2) + (alpha - beta + 5)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 
8*beta**2)) + (alpha*(alpha - 4*beta + 16) + beta*(beta - 20) + 41)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(3 - beta) + beta*(beta - 16) + 25) + beta*(5*beta - 41) + 44)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)) + (alpha*(alpha*(beta*(beta - 12) + 13) + beta*(16*beta - 100) + 76) + beta*(41*beta - 176) + 104)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(3*beta - 13) + 6) + beta*(25*beta - 76) + 28) + beta*(44*beta - 104) + 32)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)) + (alpha*(alpha*(beta*(13*beta - 24) + 4) + beta*(76*beta - 112) + 16) + beta*(104*beta - 128) + 16)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(3*beta - 2) + 8*beta - 4)/(alpha*beta + 2*beta)) + 1) )

def d8_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(beta*(-6*beta - 12) - 4) + beta*(beta*(-8*beta - 30) - 32) - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 
+ 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3) + (alpha*(alpha*(beta*(-12*beta - 24) - 8) + beta*(beta*(-9*beta - 105) - 178) - 56) + beta*(beta*(beta*(9*beta - 45) - 260) - 308) - 80)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 
33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-6*beta - 12) - 4) + beta*(beta*(6*beta - 96) - 212) - 72) + beta*(beta*(beta*(18*beta + 12) - 496) - 920) - 292) + beta*(beta*(beta*(90*beta + 22) - 830) - 1192) - 328)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(7*beta - 21) - 66) - 24) + beta*(beta*(beta*(9*beta + 99) - 200) - 684) - 248) + beta*(beta*(beta*(144*beta + 447) - 773) - 2218) - 752) + beta*(beta*(beta*(369*beta + 731) - 1000) - 2324) - 704)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(42*beta + 12) - 120) - 52) + beta*(beta*(beta*(54*beta + 456) + 144) - 956) - 408) + beta*(beta*(beta*(450*beta + 1758) + 416) - 2552) - 1024) + beta*(beta*(beta*(792*beta + 2248) + 400) - 2272) - 832)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 
3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 
1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(91*beta + 123) - 66) - 48) + beta*(beta*(beta*(117*beta + 891) + 964) - 444) - 320) + beta*(beta*(beta*(684*beta + 2940) + 2536) - 1024) - 704) + beta*(beta*(beta*(936*beta + 3128) + 2240) - 800) - 512)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 
3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(84*beta + 156) + 24) - 16) + beta*(beta*(beta*(108*beta + 780) + 1104) + 160) - 96) + beta*(beta*(beta*(504*beta + 2280) + 2624) + 352) - 192) + beta*(beta*(beta*(576*beta + 2112) + 2080) + 256) - 128)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(28*beta + 60) + 24) + beta*(beta*(36*beta + 252) + 400) + 144) + beta*(beta*(144*beta + 672) + 880) + 288) + beta*(beta*(144*beta + 560) + 640) + 192)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 + 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)) )

def d9_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2) + (2*alpha - beta + 10)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 
41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha - 2*beta + 16) - 10*beta + 41)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(6 - beta) - 16*beta + 50) - 41*beta + 88)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(13 - 6*beta) - 50*beta + 76) - 88*beta + 104)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(12 - 13*beta) - 76*beta + 56) - 104*beta + 64)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(4 - 12*beta) - 56*beta + 16) - 64*beta + 16)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-4*alpha - 16) - 16)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 + 104*beta**3 + 64*beta**2 + 16*beta)) )

def d0_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(alpha*(72*alpha + 54*beta + 270) + 108*beta + 288) + 36*beta + 72)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3) + (alpha*(alpha*(alpha*(72*alpha - 72*beta + 792) + beta*(24 - 96*beta) + 2240) + beta*(304 - 192*beta) + 2144) + beta*(128 - 64*beta) + 512)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(378 - 126*beta) + beta*(-42*beta - 1092) + 2870) + beta*(beta*(42*beta - 672) 
- 2240) + 6930) + beta*(beta*(84*beta - 1204) - 1400) + 6104) + beta*(beta*(28*beta - 392) - 196) + 1400)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 
3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(54*beta - 648) + 702) + beta*(beta*(42*beta + 90) - 4374) + 4554) + beta*(beta*(378*beta - 1200) - 9342) + 9960) + beta*(beta*(612*beta - 2424) - 7260) + 8232) + beta*(beta*(192*beta - 816) - 1488) + 1824)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(270*beta - 1170) + 540) + beta*(beta*(210*beta + 1140) - 7170) + 3220) + beta*(beta*(1200*beta + 720) - 14860) + 6600) + beta*(beta*(1680*beta - 980) - 11680) + 5200) + beta*(beta*(500*beta - 520) - 2480) + 1120)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 
240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(468*beta - 864) + 144) + beta*(beta*(364*beta + 2364) - 5040) + 816) + beta*(beta*(1692*beta + 3856) - 10128) + 1600) + beta*(beta*(2136*beta + 2224) - 7840) + 1216) + beta*(beta*(608*beta + 320) - 1664) + 256)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*beta*(324*beta - 216) + beta*(beta*(252*beta + 1764) - 1224)) + beta*(beta*(1044*beta + 3312) - 2400)) + beta*(beta*(1224*beta + 2400) - 1824)) + beta*(beta*(336*beta + 480) - 384))/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(72*alpha*beta**2 + beta**2*(56*beta + 264)) + beta**2*(104*beta + 272)) + beta**2*(32*beta + 64))/(alpha**11 + 3*alpha**10*beta + 13*alpha**10 + 3*alpha**9*beta**2 + 33*alpha**9*beta + 73*alpha**9 + alpha**8*beta**3 + 27*alpha**8*beta**2 + 153*alpha**8*beta + 231*alpha**8 + 7*alpha**7*beta**3 + 99*alpha**7*beta**2 + 387*alpha**7*beta + 450*alpha**7 + 19*alpha**6*beta**3 + 189*alpha**6*beta**2 + 576*alpha**6*beta + 552*alpha**6 + 25*alpha**5*beta**3 + 198*alpha**5*beta**2 + 504*alpha**5*beta + 416*alpha**5 + 16*alpha**4*beta**3 + 108*alpha**4*beta**2 + 240*alpha**4*beta + 176*alpha**4 + 4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) )

def d1_prime_horner(x, alpha, beta) -> float:
    return ( x*(8*beta**2/(alpha**7 + 2*alpha**6*beta + 8*alpha**6 + alpha**5*beta**2 + 12*alpha**5*beta + 25*alpha**5 + 4*alpha**4*beta**2 + 26*alpha**4*beta + 38*alpha**4 + 5*alpha**3*beta**2 + 24*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2) + x*(x*(x*(x*(x*(x*(9*x/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (8*alpha - 16*beta + 64)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(42 - 14*beta) + beta*(7*beta - 112) + 175)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(6*beta - 72) + 78) + beta*(48*beta - 300) + 228)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(30*beta - 130) + 60) + beta*(125*beta - 380) + 140)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(52*beta - 96) + 16) + beta*(152*beta - 224) + 32)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*beta*(36*beta - 24) + beta*(84*beta - 48))/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2))) )

def d2_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(27*beta + 72) - 18*beta - 36)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3) + (alpha*(alpha*(12*beta + 32) + beta*(10 - 12*beta) + 116) + beta*(8*beta - 16) - 64)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) + (alpha*(alpha*(alpha*(21*beta + 56) + beta*(28 - 84*beta) + 672) + beta*(beta*(21*beta - 238) - 413) + 1148) + beta*(beta*(196 - 14*beta) + 98) - 700)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(-18*beta - 9) + 102) + beta*(beta*(18*beta - 168) - 342) + 624) + beta*(beta*(63*beta - 168) - 759) + 678) + beta*(beta*(204 - 48*beta) + 372) - 456)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(15*beta - 90) - 255) + 220) + beta*(beta*(180*beta - 300) - 1720) + 960) + beta*(beta*(285*beta + 70) - 2020) + 760) + beta*(beta*(260 - 250*beta) + 1240) - 560)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(13*beta**2 - 81) + 18) + beta*(beta*(78*beta + 64) - 360) + 64) + beta*(beta*(75*beta + 130) - 292) + 40) + beta*(beta*(-76*beta - 40) + 208) - 32)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) + (alpha*(alpha*(alpha*beta*(beta*(51*beta + 90) - 108) + beta*(beta*(216*beta + 432) - 384)) + beta*(beta*(144*beta + 384) - 240)) + beta*(beta*(-168*beta - 240) + 192))/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*beta**2*(7*beta + 18) + beta**2*(24*beta + 64)) + beta**2*(12*beta + 40)) + beta**2*(-16*beta - 32))/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) )

def d3_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (4*alpha - 4*beta + 16)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) + (alpha*(7*alpha - 28*beta + 84) + beta*(7*beta - 112) + 175)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(6 
- 3*beta) + beta*(3*beta - 36) + 39) + beta*(12*beta - 75) + 57)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) + (alpha*(alpha*(beta*(5*beta - 40) + 25) + beta*(60*beta - 260) + 120) + beta*(125*beta - 380) + 140)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(4*beta - 
10) + 2) + beta*(26*beta - 48) + 8) + beta*(38*beta - 56) + 8)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) + (alpha*(alpha*beta*(15*beta - 12) + beta*(72*beta - 48)) + beta*(84*beta - 48))/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*beta**2 + 4*beta**2) + 4*beta**2)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) )

def d4_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(18*alpha - 18*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1) + (alpha*(32*alpha - 56*beta + 152) + beta*(32*beta - 136) + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(14*alpha - 56*beta + 210) + beta*(56*beta - 392) + 518) + beta*(beta*(238 - 14*beta) - 406) + 56)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(66 - 18*beta) + beta*(24*beta - 342) + 510) + beta*(beta*(330 - 18*beta) - 1104) + 888) + beta*(beta*(678 - 102*beta) - 624) + 144)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(100 - 
90*beta) + beta*(120*beta - 790) + 540) + beta*(beta*(730 - 90*beta) - 1600) + 760) + beta*(beta*(920 - 280*beta) - 560) + 160)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(beta*(beta*(4*beta + 12) - 144) + 48) + beta*(beta*(12*beta + 244) - 816) + 208) + beta*(beta*(784 - 144*beta) - 1216) + 256) + beta*(beta*(608 - 352*beta) - 320) + 64)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*beta*(beta*(12*beta + 36) - 72) + beta*(beta*(36*beta + 252) - 312)) + beta*(beta*(456 - 72*beta) - 384)) + beta*(beta*(192 - 192*beta) - 96))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*beta**2*(8*beta + 24) + beta**2*(24*beta + 104)) + 128*beta**2) + beta**2*(32 - 32*beta))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) )

def d5_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1) + (16*alpha - 16*beta + 72)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(7*alpha - 28*beta + 98) + beta*(7*beta - 126) + 224)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(30 - 12*beta) + beta*(12*beta - 168) + 216) + beta*(54*beta - 384) + 336)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(5*beta - 50) + 40) + beta*(70*beta - 360) + 200) + beta*(160*beta - 560) + 240)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(20*beta - 64) + 16) + beta*(144*beta - 320) + 64) + beta*(224*beta - 384) + 64)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*beta*(24*beta - 24) + beta*(120*beta - 96)) + beta*(144*beta - 96))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(8*alpha*beta**2 + 32*beta**2) + 32*beta**2)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) )

def d6_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(18 - 27*beta) - 72*beta + 36)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3) + (alpha*(alpha*(8 - 12*beta) + beta*(12*beta - 98) + 56) + beta*(32*beta - 172) + 80)/(alpha**3*beta**3 + 6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) + (alpha*(alpha*(alpha*(14 - 21*beta) + beta*(84*beta - 434) + 252) + beta*(beta*(644 - 21*beta) - 2051) + 1022) + beta*(beta*(1120 - 56*beta) - 2716) 
+ 1148)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(18*beta - 63) + 36) + beta*(beta*(336 - 18*beta) - 756) + 372) + beta*(beta*(1506 - 135*beta) - 2649) + 1128) + beta*(beta*(1968 - 234*beta) - 2850) + 1056)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(180 - 15*beta) - 285) + 130) + beta*(beta*(1980 - 270*beta) - 2590) + 1020) 
+ beta*(beta*(6640 - 1185*beta) - 7420) + 2560) + beta*(beta*(7040 - 1540*beta) - 6800) + 2080)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(78 - 17*beta) - 75) + 24) + beta*(beta*(664 - 180*beta) - 570) + 160) + beta*(beta*(1840 - 591*beta) - 1408) + 352) + beta*(beta*(1664 - 622*beta) - 1136) + 256)/(alpha**3*beta**3 + 6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(216 - 99*beta) - 144) + 24) + beta*(beta*(1584 - 810*beta) - 960) + 144) + beta*(beta*(3840 - 2196*beta) - 2112) + 288) + beta*(beta*(3072 - 1968*beta) - 1536) + 192)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(beta*(24 - 23*beta) - 12) + beta*(112 - 116*beta) - 48) + beta*(128 - 152*beta) - 48)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)) )

def d7_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2) + (4*alpha - 4*beta + 20)/(alpha**2*beta**2 + 4*alpha*beta**2 
+ 4*beta**2)) + (alpha*(7*alpha - 28*beta + 112) + beta*(7*beta - 140) + 287)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(9 - 
3*beta) + beta*(3*beta - 48) + 75) + beta*(15*beta - 123) + 132)/(alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)) + (alpha*(alpha*(beta*(5*beta - 60) + 
65) + beta*(80*beta - 500) + 380) + beta*(205*beta - 880) + 520)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(6*beta - 26) + 12) + beta*(50*beta - 152) + 56) + beta*(88*beta - 208) + 64)/(alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)) + (alpha*(alpha*(beta*(39*beta - 72) 
+ 12) + beta*(228*beta - 336) + 48) + beta*(312*beta - 384) + 48)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(6*beta - 4) + 16*beta - 8)/(alpha*beta + 2*beta)) + 1 )

def d8_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(beta*(-54*beta - 108) - 36) + beta*(beta*(-72*beta - 270) - 288) - 72)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3) 
+ (alpha*(alpha*(beta*(-96*beta - 192) - 64) + beta*(beta*(-72*beta - 840) - 1424) - 448) + beta*(beta*(beta*(72*beta - 360) - 2080) - 2464) - 640)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-42*beta - 84) - 28) + beta*(beta*(42*beta - 672) - 1484) - 504) + beta*(beta*(beta*(126*beta + 84) - 3472) - 6440) - 2044) + beta*(beta*(beta*(630*beta + 154) - 5810) - 8344) - 2296)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(42*beta - 126) - 396) - 144) + beta*(beta*(beta*(54*beta + 594) - 1200) - 4104) - 1488) + beta*(beta*(beta*(864*beta + 2682) - 4638) - 13308) - 4512) + beta*(beta*(beta*(2214*beta + 4386) - 6000) - 13944) - 4224)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 
+ 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(210*beta + 60) - 600) - 260) + beta*(beta*(beta*(270*beta + 2280) + 720) - 4780) - 2040) + beta*(beta*(beta*(2250*beta + 8790) + 2080) - 12760) - 5120) + 
beta*(beta*(beta*(3960*beta + 11240) + 2000) - 11360) - 4160)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(364*beta + 492) 
- 264) - 192) + beta*(beta*(beta*(468*beta + 3564) + 3856) - 1776) - 1280) + beta*(beta*(beta*(2736*beta + 11760) + 10144) - 4096) - 2816) + beta*(beta*(beta*(3744*beta + 12512) + 8960) - 3200) - 2048)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 
1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 
+ 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(252*beta + 468) + 72) - 48) + beta*(beta*(beta*(324*beta + 2340) + 3312) + 480) - 288) + beta*(beta*(beta*(1512*beta + 6840) + 7872) + 1056) - 576) + beta*(beta*(beta*(1728*beta + 6336) + 6240) + 768) - 384)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 
+ 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(56*beta + 120) + 48) + beta*(beta*(72*beta + 504) + 800) + 288) + beta*(beta*(288*beta + 1344) + 1760) + 576) + beta*(beta*(288*beta + 1120) + 1280) + 384)/(alpha**3*beta**8 + 9*alpha**3*beta**7 + 33*alpha**3*beta**6 + 63*alpha**3*beta**5 + 66*alpha**3*beta**4 + 36*alpha**3*beta**3 + 8*alpha**3*beta**2 + 3*alpha**2*beta**9 + 33*alpha**2*beta**8 + 153*alpha**2*beta**7 + 387*alpha**2*beta**6 + 576*alpha**2*beta**5 + 504*alpha**2*beta**4 + 240*alpha**2*beta**3 + 48*alpha**2*beta**2 + 3*alpha*beta**10 + 39*alpha*beta**9 + 219*alpha*beta**8 + 693*alpha*beta**7 + 1350*alpha*beta**6 + 1656*alpha*beta**5 + 1248*alpha*beta**4 + 528*alpha*beta**3 + 96*alpha*beta**2 + beta**11 + 15*beta**10 + 99*beta**9 + 377*beta**8 + 912*beta**7 + 1452*beta**6 + 1520*beta**5 + 1008*beta**4 + 384*beta**3 + 64*beta**2)) )

def d9_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 
104*beta**4 + 64*beta**3 + 16*beta**2) + (16*alpha - 8*beta + 80)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 
+ 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(7*alpha - 14*beta + 112) - 70*beta + 287)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(36 - 6*beta) - 96*beta + 300) - 246*beta + 528)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(65 - 30*beta) - 250*beta + 380) - 440*beta + 520)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(48 - 52*beta) - 304*beta + 224) - 416*beta + 256)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(12 - 36*beta) - 168*beta + 48) - 192*beta + 48)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-8*alpha - 32) - 32)/(alpha**2*beta**5 + 6*alpha**2*beta**4 + 13*alpha**2*beta**3 + 12*alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha*beta**6 + 16*alpha*beta**5 + 50*alpha*beta**4 + 76*alpha*beta**3 + 56*alpha*beta**2 + 16*alpha*beta + beta**7 + 10*beta**6 + 41*beta**5 + 88*beta**4 + 104*beta**3 + 64*beta**2 + 16*beta)) )

#########################################################################################################

# I use a class to represent the Hermite Birkhoff interpolant
# we will have an instance of this class on each step
class HB:
    def __init__(   
        self, 
        x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
        y_i_minus_2, f_i_minus_2,
        y_i_minus_1, f_i_minus_1,
        y_i_minus_0_5, f_i_minus_0_5,
        y_i, f_i,
        y_i_plus_1, f_i_plus_1,
        monitor
    ):
        h_i = x_i - x_i_minus_0_5
        h_i_minus_1 = x_i_minus_1 - x_i_minus_2
        h_i_plus_1 = x_i_plus_1 - x_i
        
        self.alpha = h_i_minus_1 / h_i
        self.beta = h_i_plus_1 / h_i

        monitor.different_values_alpha.add(self.alpha)
        monitor.different_values_beta.add(self.beta)

        self.h_i = h_i
        self.x_i = x_i

        # we also store x_i_minus_1 and x_i_plus_1 so that we can build the final interpolant
        self.x_i_plus_1 = x_i_plus_1
        self.x_i_minus_0_5 = x_i_minus_0_5
        self.x_i_minus_1 = x_i_minus_1
        self.x_i_minus_2 = x_i_minus_2

        self.y_i_minus_2 = y_i_minus_2 
        self.f_i_minus_2 = f_i_minus_2

        self.y_i_minus_1 = y_i_minus_1 
        self.f_i_minus_1 = f_i_minus_1
        
        self.y_i_minus_0_5 = y_i_minus_0_5 
        self.f_i_minus_0_5 = f_i_minus_0_5

        self.y_i = y_i
        self.f_i = f_i

        self.y_i_plus_1 = y_i_plus_1
        self.f_i_plus_1 = f_i_plus_1

        xs = get_Chebyshev_nodes(x_i_minus_2, x_i_plus_1, 10)
        ys = [self.eval(x) for x in xs]
        self.eval_bary_interp = BarycentricInterpolator(xs, ys)

        y_primes = [self.prime(x) for x in xs]
        self.prime_bary_interp = BarycentricInterpolator(xs, y_primes) 

    def eval(self, x):
        pheta = (x - self.x_i) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i) / h_i
        return (  
                             d0(pheta, self.alpha, self.beta) * self.y_i_minus_2 
                + self.h_i * d1(pheta, self.alpha, self.beta) * self.f_i_minus_2

                           + d2(pheta, self.alpha, self.beta) * self.y_i_minus_1 
                + self.h_i * d3(pheta, self.alpha, self.beta) * self.f_i_minus_1

                           + d4(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 
                + self.h_i * d5(pheta, self.alpha, self.beta) * self.f_i_minus_0_5
                
                           + d6(pheta, self.alpha, self.beta) * self.y_i         
                + self.h_i * d7(pheta, self.alpha, self.beta) * self.f_i 
                
                           + d8(pheta, self.alpha, self.beta) * self.y_i_plus_1  
                + self.h_i * d9(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def prime(self, x):
        pheta = (x - self.x_i) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i) / h_i
        return (  
              d0_prime(pheta, self.alpha, self.beta) * self.y_i_minus_2 / self.h_i 
            + d1_prime(pheta, self.alpha, self.beta) * self.f_i_minus_2

            + d2_prime(pheta, self.alpha, self.beta) * self.y_i_minus_1 / self.h_i 
            + d3_prime(pheta, self.alpha, self.beta) * self.f_i_minus_1

            + d4_prime(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 / self.h_i 
            + d5_prime(pheta, self.alpha, self.beta) * self.f_i_minus_0_5

            + d6_prime(pheta, self.alpha, self.beta) * self.y_i         / self.h_i 
            + d7_prime(pheta, self.alpha, self.beta) * self.f_i 

            + d8_prime(pheta, self.alpha, self.beta) * self.y_i_plus_1  / self.h_i 
            + d9_prime(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def eval_horner(self, x):
        pheta = (x - self.x_i) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i) / h_i
        return (  
                             d0_horner(pheta, self.alpha, self.beta) * self.y_i_minus_2 
                + self.h_i * d1_horner(pheta, self.alpha, self.beta) * self.f_i_minus_2

                           + d2_horner(pheta, self.alpha, self.beta) * self.y_i_minus_1 
                + self.h_i * d3_horner(pheta, self.alpha, self.beta) * self.f_i_minus_1

                           + d4_horner(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 
                + self.h_i * d5_horner(pheta, self.alpha, self.beta) * self.f_i_minus_0_5
                
                           + d6_horner(pheta, self.alpha, self.beta) * self.y_i         
                + self.h_i * d7_horner(pheta, self.alpha, self.beta) * self.f_i 
                
                           + d8_horner(pheta, self.alpha, self.beta) * self.y_i_plus_1  
                + self.h_i * d9_horner(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def prime_horner(self, x):
        pheta = (x - self.x_i) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i) / h_i
        return (  
              d0_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_2 / self.h_i 
            + d1_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_2

            + d2_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_1 / self.h_i 
            + d3_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_1

            + d4_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 / self.h_i 
            + d5_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_0_5

            + d6_prime_horner(pheta, self.alpha, self.beta) * self.y_i         / self.h_i 
            + d7_prime_horner(pheta, self.alpha, self.beta) * self.f_i 

            + d8_prime_horner(pheta, self.alpha, self.beta) * self.y_i_plus_1  / self.h_i 
            + d9_prime_horner(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )
    
    def eval_bary(self, x) -> float:
        return self.eval_bary_interp(x)

    def prime_bary(self, x) -> float:
        return self.prime_bary_interp(x)