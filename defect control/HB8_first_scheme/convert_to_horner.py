

from sympy.polys.polyfuncs import horner
from sympy.abc import x
from sympy import symbols

alpha = symbols("alpha")
beta = symbols("beta")

def d0(x, alpha, beta) -> float:
    return ( (2*alpha**2 + 8*alpha*beta + 2*alpha + 6*beta**2 + 4*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**7) + (6*alpha**3 + 27*alpha**2*beta + 2*alpha**2 + 28*alpha*beta**2 - alpha*beta - 4*alpha + 7*beta**3 - 7*beta**2 - 8*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**6) + (6*alpha**4 + 30*alpha**3*beta - 6*alpha**3 + 38*alpha**2*beta**2 - 36*alpha**2*beta - 10*alpha**2 + 14*alpha*beta**3 - 46*alpha*beta**2 - 22*alpha*beta + 2*alpha - 14*beta**3 - 4*beta**2 + 4*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**5) + (2*alpha**5 + 11*alpha**4*beta - 10*alpha**4 + 16*alpha**3*beta**2 - 53*alpha**3*beta - 6*alpha**3 + 7*alpha**2*beta**3 - 71*alpha**2*beta**2 - 9*alpha**2*beta + 6*alpha**2 - 28*alpha*beta**3 + 8*alpha*beta**2 + 15*alpha*beta + 7*beta**3 + 5*beta**2)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**4) + (-4*alpha**5 - 22*alpha**4*beta + 2*alpha**4 - 32*alpha**3*beta**2 + 16*alpha**3*beta + 6*alpha**3 - 14*alpha**2*beta**3 + 28*alpha**2*beta**2 + 18*alpha**2*beta + 14*alpha*beta**3 + 10*alpha*beta**2)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**3) + (2*alpha**4 + 9*alpha**3*beta + 2*alpha**3 + 7*alpha**2*beta**2 + 5*alpha**2*beta)/(alpha**5*beta**3 + 5*alpha**4*beta**4 + 3*alpha**4*beta**3 + 10*alpha**3*beta**5 + 12*alpha**3*beta**4 + 3*alpha**3*beta**3 + 10*alpha**2*beta**6 + 18*alpha**2*beta**5 + 9*alpha**2*beta**4 + alpha**2*beta**3 + 5*alpha*beta**7 + 12*alpha*beta**6 + 9*alpha*beta**5 + 2*alpha*beta**4 + beta**8 + 3*beta**7 + 3*beta**6 + beta**5)*(x**2) + 0*(x) + 0 )
def d1(x, alpha, beta) -> float:
    return ( 1/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**7) + (3*alpha + beta - 2)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**6) + (3*alpha**2 + 2*alpha*beta - 6*alpha - 2*beta + 1)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**5) + (alpha**3 + alpha**2*beta - 6*alpha**2 - 4*alpha*beta + 3*alpha + beta)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**4) + (-2*alpha**3 - 2*alpha**2*beta + 3*alpha**2 + 2*alpha*beta)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 
2*beta**5 + beta**4)*(x**3) + alpha**2/(alpha**3*beta**2 + 3*alpha**2*beta**3 + 2*alpha**2*beta**2 + 3*alpha*beta**4 + 4*alpha*beta**3 + alpha*beta**2 + beta**5 + 2*beta**4 + beta**3)*(x**2) + 0*(x) + 0 )
def d2(x, alpha, beta) -> float:
    return ( (-2*alpha**2 + 4*alpha*beta - 2*alpha + 2*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**7) + (-6*alpha**3 + 9*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 5*alpha*beta + 4*alpha + 4*beta**2 - 4*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**6) + (-6*alpha**4 + 6*alpha**3*beta + 6*alpha**3 + 16*alpha**2*beta**2 - 18*alpha**2*beta + 10*alpha**2 + 4*alpha*beta**3 - 8*alpha*beta**2 - 2*alpha*beta - 2*alpha + 2*beta**3 - 8*beta**2 + 2*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**5) + (-2*alpha**5 + alpha**4*beta + 10*alpha**4 + 8*alpha**3*beta**2 - 13*alpha**3*beta + 6*alpha**3 + 5*alpha**2*beta**3 - 28*alpha**2*beta**2 + 9*alpha**2*beta - 6*alpha**2 - 5*alpha*beta**3 - 8*alpha*beta**2 + 3*alpha*beta - 4*beta**3 + 4*beta**2)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**4) + (4*alpha**5 - 2*alpha**4*beta - 2*alpha**4 - 16*alpha**3*beta**2 + 8*alpha**3*beta - 6*alpha**3 - 10*alpha**2*beta**3 + 8*alpha**2*beta**2 - 2*alpha*beta**3 + 8*alpha*beta**2 + 2*beta**3)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**3) + (-2*alpha**4 + alpha**3*beta - 
2*alpha**3 + 8*alpha**2*beta**2 - alpha**2*beta + 5*alpha*beta**3 + 4*alpha*beta**2 + 3*beta**3)/(alpha**5*beta**3 + 3*alpha**4*beta**3 + 3*alpha**3*beta**3 + alpha**2*beta**3)*(x**2) + 0*(x) + 0 )
def d3(x, alpha, beta) -> float:
    return ( 1/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**7) + (3*alpha + 2*beta - 2)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**6) + (3*alpha**2 + 4*alpha*beta - 6*alpha + beta**2 - 4*beta + 1)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**5) + (alpha**3 + 2*alpha**2*beta - 6*alpha**2 + alpha*beta**2 - 8*alpha*beta + 3*alpha - 2*beta**2 + 2*beta)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**4) + (-2*alpha**3 - 4*alpha**2*beta + 3*alpha**2 - 2*alpha*beta**2 + 4*alpha*beta + beta**2)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**3) + (alpha**2 + 2*alpha*beta + beta**2)/(alpha**3*beta**2 + 2*alpha**2*beta**2 + alpha*beta**2)*(x**2) + 0*(x) + 0 )
def d4(x, alpha, beta) -> float:
    return ( (2*alpha**2 + 2*alpha*beta - 4*alpha - 2*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**7) + (8*alpha**3 + 12*alpha**2*beta - 19*alpha**2 + 4*alpha*beta**2 - 19*alpha*beta + 8*alpha - 4*beta**2 + 4*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**6) + (12*alpha**4 + 24*alpha**3*beta - 36*alpha**3 + 14*alpha**2*beta**2 - 54*alpha**2*beta + 32*alpha**2 + 2*alpha*beta**3 - 22*alpha*beta**2 + 32*alpha*beta - 4*alpha - 2*beta**3 + 8*beta**2 - 2*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**5) + (8*alpha**5 + 20*alpha**4*beta - 34*alpha**4 + 16*alpha**3*beta**2 - 68*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**3 - 41*alpha**2*beta**2 + 72*alpha**2*beta - 15*alpha**2 - 7*alpha*beta**3 + 32*alpha*beta**2 - 15*alpha*beta + 4*beta**3 - 4*beta**2)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**4) + (2*alpha**6 + 6*alpha**5*beta - 16*alpha**5 + 6*alpha**4*beta**2 - 40*alpha**4*beta + 32*alpha**4 + 2*alpha**3*beta**3 - 32*alpha**3*beta**2 + 64*alpha**3*beta - 20*alpha**3 - 8*alpha**2*beta**3 + 40*alpha**2*beta**2 - 30*alpha**2*beta + 8*alpha*beta**3 - 14*alpha*beta**2 - 2*beta**3)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**3) + (-3*alpha**4 - 6*alpha**3*beta + 8*alpha**3 - 3*alpha**2*beta**2 + 12*alpha**2*beta - 10*alpha**2 + 4*alpha*beta**2 - 10*alpha*beta - 3*beta**2)/(alpha**4 + 
2*alpha**3*beta + alpha**2*beta**2)*(x**2) + 0*(x) + 1 )
def d5(x, alpha, beta) -> float:
    return ( 1/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**7) + (4*alpha + 2*beta - 2)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**6) + (6*alpha**2 + 6*alpha*beta - 8*alpha + beta**2 - 4*beta + 1)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**5) + (4*alpha**3 + 6*alpha**2*beta - 12*alpha**2 + 2*alpha*beta**2 - 12*alpha*beta + 4*alpha - 2*beta**2 + 2*beta)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**4) + (alpha**4 + 2*alpha**3*beta - 8*alpha**3 + alpha**2*beta**2 - 12*alpha**2*beta + 6*alpha**2 - 4*alpha*beta**2 + 6*alpha*beta + beta**2)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**3) + (-2*alpha**2 - 2*alpha*beta + 4*alpha + 2*beta)/(alpha**2 + alpha*beta)*(x**2) + 1*(x) + 0 )      
def d6(x, alpha, beta) -> float:
    return ( (-2*alpha**2 - 2*alpha*beta - 8*alpha - 4*beta - 6)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + (-8*alpha**3 - 12*alpha**2*beta - 29*alpha**2 - 4*alpha*beta**2 - 29*alpha*beta - 14*alpha - 8*beta**2 - 7*beta + 7)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + (-12*alpha**4 - 24*alpha**3*beta - 36*alpha**3 - 14*alpha**2*beta**2 - 54*alpha**2*beta + 4*alpha**2 - 2*alpha*beta**3 - 26*alpha*beta**2 + 4*alpha*beta + 28*alpha - 4*beta**3 + 4*beta**2 + 14*beta)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + (-8*alpha**5 - 20*alpha**4*beta - 14*alpha**4 - 16*alpha**3*beta**2 - 28*alpha**3*beta + 36*alpha**3 - 4*alpha**2*beta**3 - 19*alpha**2*beta**2 + 54*alpha**2*beta + 42*alpha**2 - 5*alpha*beta**3 + 28*alpha*beta**2 + 42*alpha*beta + 5*beta**3 + 7*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + (-2*alpha**6 - 6*alpha**5*beta + 4*alpha**5 - 6*alpha**4*beta**2 + 10*alpha**4*beta + 34*alpha**4 - 2*alpha**3*beta**3 + 8*alpha**3*beta**2 + 68*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**3 + 44*alpha**2*beta**2 + 42*alpha**2*beta + 10*alpha*beta**3 + 14*alpha*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + (3*alpha**6 + 9*alpha**5*beta + 10*alpha**5 + 9*alpha**4*beta**2 + 25*alpha**4*beta + 7*alpha**4 + 3*alpha**3*beta**3 + 20*alpha**3*beta**2 + 14*alpha**3*beta + 5*alpha**2*beta**3 + 7*alpha**2*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 0*(x) + 0 )
def d7(x, alpha, beta) -> float:
    return ( 1/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**7) + 
(4*alpha + 2*beta - 1)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**6) + (6*alpha**2 + 6*alpha*beta - 4*alpha + beta**2 - 2*beta)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**5) + (4*alpha**3 + 6*alpha**2*beta - 6*alpha**2 + 2*alpha*beta**2 - 6*alpha*beta - beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**4) + (alpha**4 + 2*alpha**3*beta - 4*alpha**3 + alpha**2*beta**2 
- 6*alpha**2*beta - 2*alpha*beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**3) + (-alpha**4 - 2*alpha**3*beta - alpha**2*beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 
6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**2) + 0*(x) + 0 )
def d0_prime(x, alpha, beta) -> float:
    return ( 7*(2*alpha**2 + 8*alpha*beta + 2*alpha + 6*beta**2 + 4*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**6) + 6*(6*alpha**3 + 27*alpha**2*beta + 2*alpha**2 + 28*alpha*beta**2 - alpha*beta - 4*alpha + 7*beta**3 - 7*beta**2 - 8*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**5) + 5*(6*alpha**4 + 30*alpha**3*beta - 6*alpha**3 
+ 38*alpha**2*beta**2 - 36*alpha**2*beta - 10*alpha**2 + 14*alpha*beta**3 - 46*alpha*beta**2 - 22*alpha*beta + 2*alpha - 14*beta**3 - 4*beta**2 + 4*beta)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 
+ 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**4) + 4*(2*alpha**5 + 11*alpha**4*beta - 10*alpha**4 + 16*alpha**3*beta**2 - 53*alpha**3*beta - 6*alpha**3 + 7*alpha**2*beta**3 - 71*alpha**2*beta**2 - 9*alpha**2*beta + 6*alpha**2 - 28*alpha*beta**3 + 8*alpha*beta**2 + 15*alpha*beta + 7*beta**3 + 5*beta**2)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**3) + 3*(-4*alpha**5 - 
22*alpha**4*beta + 2*alpha**4 - 32*alpha**3*beta**2 + 16*alpha**3*beta + 6*alpha**3 - 14*alpha**2*beta**3 + 28*alpha**2*beta**2 + 18*alpha**2*beta + 14*alpha*beta**3 + 10*alpha*beta**2)/(alpha**6*beta**3 + 6*alpha**5*beta**4 + 3*alpha**5*beta**3 + 15*alpha**4*beta**5 + 15*alpha**4*beta**4 + 3*alpha**4*beta**3 + 20*alpha**3*beta**6 + 30*alpha**3*beta**5 + 12*alpha**3*beta**4 + alpha**3*beta**3 + 15*alpha**2*beta**7 + 30*alpha**2*beta**6 + 18*alpha**2*beta**5 + 3*alpha**2*beta**4 + 6*alpha*beta**8 + 15*alpha*beta**7 + 12*alpha*beta**6 + 3*alpha*beta**5 + beta**9 + 3*beta**8 + 3*beta**7 + beta**6)*(x**2) + 2*(2*alpha**4 + 9*alpha**3*beta + 2*alpha**3 + 7*alpha**2*beta**2 + 5*alpha**2*beta)/(alpha**5*beta**3 + 5*alpha**4*beta**4 + 3*alpha**4*beta**3 + 10*alpha**3*beta**5 + 12*alpha**3*beta**4 + 3*alpha**3*beta**3 + 10*alpha**2*beta**6 + 18*alpha**2*beta**5 + 9*alpha**2*beta**4 + alpha**2*beta**3 + 5*alpha*beta**7 + 12*alpha*beta**6 + 9*alpha*beta**5 + 2*alpha*beta**4 + beta**8 + 3*beta**7 + 3*beta**6 + beta**5)*x + 0 )
def d1_prime(x, alpha, beta) -> float:
    return ( 7*1/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**6) + 6*(3*alpha + beta - 2)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**5) + 5*(3*alpha**2 + 2*alpha*beta - 6*alpha - 2*beta + 1)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**4) + 4*(alpha**3 + alpha**2*beta - 6*alpha**2 - 4*alpha*beta + 3*alpha + beta)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + beta**6 + 2*beta**5 + beta**4)*(x**3) + 3*(-2*alpha**3 - 2*alpha**2*beta + 3*alpha**2 + 2*alpha*beta)/(alpha**4*beta**2 + 4*alpha**3*beta**3 + 2*alpha**3*beta**2 + 6*alpha**2*beta**4 + 6*alpha**2*beta**3 + alpha**2*beta**2 + 4*alpha*beta**5 + 6*alpha*beta**4 + 2*alpha*beta**3 + 
beta**6 + 2*beta**5 + beta**4)*(x**2) + 2*alpha**2/(alpha**3*beta**2 + 3*alpha**2*beta**3 + 2*alpha**2*beta**2 + 3*alpha*beta**4 + 4*alpha*beta**3 + alpha*beta**2 + beta**5 + 2*beta**4 + beta**3)*x + 0 )
def d2_prime(x, alpha, beta) -> float:
    return ( 7*(-2*alpha**2 + 4*alpha*beta - 2*alpha + 2*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**6) + 6*(-6*alpha**3 + 9*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 5*alpha*beta + 4*alpha + 4*beta**2 - 4*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**5) + 5*(-6*alpha**4 + 6*alpha**3*beta + 6*alpha**3 + 16*alpha**2*beta**2 - 18*alpha**2*beta + 10*alpha**2 + 4*alpha*beta**3 - 8*alpha*beta**2 - 2*alpha*beta - 2*alpha + 2*beta**3 - 8*beta**2 + 2*beta)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**4) + 4*(-2*alpha**5 + alpha**4*beta + 10*alpha**4 + 8*alpha**3*beta**2 - 13*alpha**3*beta + 6*alpha**3 + 5*alpha**2*beta**3 - 28*alpha**2*beta**2 + 9*alpha**2*beta - 6*alpha**2 - 5*alpha*beta**3 - 8*alpha*beta**2 + 3*alpha*beta - 4*beta**3 + 4*beta**2)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**3) + 3*(4*alpha**5 - 2*alpha**4*beta - 2*alpha**4 - 16*alpha**3*beta**2 + 8*alpha**3*beta - 6*alpha**3 - 10*alpha**2*beta**3 + 8*alpha**2*beta**2 - 2*alpha*beta**3 + 8*alpha*beta**2 + 2*beta**3)/(alpha**6*beta**3 + 3*alpha**5*beta**3 + 3*alpha**4*beta**3 + alpha**3*beta**3)*(x**2) + 2*(-2*alpha**4 + alpha**3*beta - 2*alpha**3 + 8*alpha**2*beta**2 - alpha**2*beta + 5*alpha*beta**3 + 4*alpha*beta**2 + 3*beta**3)/(alpha**5*beta**3 + 3*alpha**4*beta**3 + 3*alpha**3*beta**3 + alpha**2*beta**3)*x + 0 )
def d3_prime(x, alpha, beta) -> float:
    return ( 7*1/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**6) + 6*(3*alpha + 2*beta - 2)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**5) + 5*(3*alpha**2 + 4*alpha*beta - 6*alpha + beta**2 - 4*beta + 1)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**4) + 4*(alpha**3 + 2*alpha**2*beta - 6*alpha**2 + alpha*beta**2 - 8*alpha*beta + 3*alpha - 2*beta**2 + 2*beta)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**3) + 3*(-2*alpha**3 - 4*alpha**2*beta + 3*alpha**2 - 2*alpha*beta**2 + 4*alpha*beta + beta**2)/(alpha**4*beta**2 + 2*alpha**3*beta**2 + alpha**2*beta**2)*(x**2) + 2*(alpha**2 + 2*alpha*beta + beta**2)/(alpha**3*beta**2 + 2*alpha**2*beta**2 + alpha*beta**2)*x + 0 )
def d4_prime(x, alpha, beta) -> float:
    return ( 7*(2*alpha**2 + 2*alpha*beta - 4*alpha - 2*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**6) + 6*(8*alpha**3 + 12*alpha**2*beta - 19*alpha**2 + 4*alpha*beta**2 - 19*alpha*beta + 8*alpha - 4*beta**2 + 4*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**5) + 5*(12*alpha**4 + 24*alpha**3*beta - 36*alpha**3 + 14*alpha**2*beta**2 - 54*alpha**2*beta + 32*alpha**2 + 2*alpha*beta**3 - 22*alpha*beta**2 + 32*alpha*beta - 4*alpha - 2*beta**3 + 8*beta**2 - 2*beta)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**4) + 4*(8*alpha**5 + 20*alpha**4*beta - 34*alpha**4 + 16*alpha**3*beta**2 - 68*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**3 - 41*alpha**2*beta**2 + 72*alpha**2*beta - 15*alpha**2 - 7*alpha*beta**3 + 32*alpha*beta**2 - 15*alpha*beta + 4*beta**3 - 4*beta**2)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**3) + 3*(2*alpha**6 + 6*alpha**5*beta - 16*alpha**5 + 6*alpha**4*beta**2 - 40*alpha**4*beta + 32*alpha**4 + 2*alpha**3*beta**3 - 32*alpha**3*beta**2 + 64*alpha**3*beta - 20*alpha**3 - 8*alpha**2*beta**3 + 40*alpha**2*beta**2 - 30*alpha**2*beta + 8*alpha*beta**3 - 14*alpha*beta**2 - 2*beta**3)/(alpha**6 + 3*alpha**5*beta + 3*alpha**4*beta**2 + alpha**3*beta**3)*(x**2) + 2*(-3*alpha**4 - 6*alpha**3*beta + 8*alpha**3 - 3*alpha**2*beta**2 + 12*alpha**2*beta - 10*alpha**2 + 4*alpha*beta**2 - 10*alpha*beta - 3*beta**2)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*x + 0 )
def d5_prime(x, alpha, beta) -> float:
    return ( 7*1/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**6) + 6*(4*alpha + 2*beta - 2)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**5) + 5*(6*alpha**2 + 6*alpha*beta - 8*alpha + beta**2 - 4*beta + 1)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**4) + 4*(4*alpha**3 + 6*alpha**2*beta - 12*alpha**2 + 2*alpha*beta**2 - 12*alpha*beta + 4*alpha - 2*beta**2 + 2*beta)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**3) + 3*(alpha**4 + 2*alpha**3*beta - 8*alpha**3 + alpha**2*beta**2 - 12*alpha**2*beta + 6*alpha**2 - 4*alpha*beta**2 + 6*alpha*beta + beta**2)/(alpha**4 + 2*alpha**3*beta + alpha**2*beta**2)*(x**2) + 2*(-2*alpha**2 - 2*alpha*beta + 4*alpha + 2*beta)/(alpha**2 + alpha*beta)*x + 1 )       
def d6_prime(x, alpha, beta) -> float:
    return ( 7*(-2*alpha**2 - 2*alpha*beta - 8*alpha - 4*beta - 6)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + 6*(-8*alpha**3 - 12*alpha**2*beta - 29*alpha**2 - 4*alpha*beta**2 - 29*alpha*beta - 14*alpha - 8*beta**2 - 7*beta + 7)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + 5*(-12*alpha**4 - 
24*alpha**3*beta - 36*alpha**3 - 14*alpha**2*beta**2 - 54*alpha**2*beta + 4*alpha**2 - 2*alpha*beta**3 - 26*alpha*beta**2 + 4*alpha*beta + 28*alpha - 4*beta**3 + 4*beta**2 + 14*beta)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + 4*(-8*alpha**5 - 20*alpha**4*beta - 14*alpha**4 - 16*alpha**3*beta**2 - 28*alpha**3*beta + 36*alpha**3 - 4*alpha**2*beta**3 - 19*alpha**2*beta**2 + 54*alpha**2*beta + 42*alpha**2 - 5*alpha*beta**3 + 28*alpha*beta**2 + 42*alpha*beta + 5*beta**3 + 7*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + 3*(-2*alpha**6 - 6*alpha**5*beta + 4*alpha**5 - 6*alpha**4*beta**2 + 10*alpha**4*beta + 34*alpha**4 - 2*alpha**3*beta**3 + 8*alpha**3*beta**2 + 68*alpha**3*beta + 28*alpha**3 + 2*alpha**2*beta**3 + 44*alpha**2*beta**2 + 42*alpha**2*beta + 10*alpha*beta**3 + 14*alpha*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 2*(3*alpha**6 + 9*alpha**5*beta + 10*alpha**5 + 9*alpha**4*beta**2 + 25*alpha**4*beta + 7*alpha**4 + 3*alpha**3*beta**3 + 20*alpha**3*beta**2 + 14*alpha**3*beta + 5*alpha**2*beta**3 + 7*alpha**2*beta**2)/(alpha**6 + 3*alpha**5*beta + 6*alpha**5 + 3*alpha**4*beta**2 + 15*alpha**4*beta + 15*alpha**4 + alpha**3*beta**3 + 12*alpha**3*beta**2 + 30*alpha**3*beta + 20*alpha**3 + 3*alpha**2*beta**3 + 18*alpha**2*beta**2 + 30*alpha**2*beta + 15*alpha**2 + 3*alpha*beta**3 + 12*alpha*beta**2 + 15*alpha*beta + 6*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*x + 0 )
def d7_prime(x, alpha, beta) -> float:
    return ( 7*1/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**6) 
+ 6*(4*alpha + 2*beta - 1)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 
1)*(x**5) + 5*(6*alpha**2 + 6*alpha*beta - 4*alpha + beta**2 - 2*beta)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 
6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**4) + 4*(4*alpha**3 + 6*alpha**2*beta - 6*alpha**2 + 2*alpha*beta**2 - 6*alpha*beta - beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**3) + 3*(alpha**4 + 2*alpha**3*beta - 4*alpha**3 + alpha**2*beta**2 - 6*alpha**2*beta - 2*alpha*beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*(x**2) + 2*(-alpha**4 - 2*alpha**3*beta - alpha**2*beta**2)/(alpha**4 + 2*alpha**3*beta + 4*alpha**3 + alpha**2*beta**2 + 6*alpha**2*beta + 6*alpha**2 + 2*alpha*beta**2 + 6*alpha*beta + 4*alpha + beta**2 + 2*beta + 1)*x + 0 )

print("def d0_horner(x, alpha, beta) -> float:\n    return (", horner(d0(x, alpha, beta)), ")\n")
print("def d1_horner(x, alpha, beta) -> float:\n    return (", horner(d1(x, alpha, beta)), ")\n")
print("def d2_horner(x, alpha, beta) -> float:\n    return (", horner(d2(x, alpha, beta)), ")\n")
print("def d3_horner(x, alpha, beta) -> float:\n    return (", horner(d3(x, alpha, beta)), ")\n")
print("def d4_horner(x, alpha, beta) -> float:\n    return (", horner(d4(x, alpha, beta)), ")\n")
print("def d5_horner(x, alpha, beta) -> float:\n    return (", horner(d5(x, alpha, beta)), ")\n")
print("def d6_horner(x, alpha, beta) -> float:\n    return (", horner(d6(x, alpha, beta)), ")\n")
print("def d7_horner(x, alpha, beta) -> float:\n    return (", horner(d7(x, alpha, beta)), ")\n")

print("def d0_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d0_prime(x, alpha, beta)), ")\n")
print("def d1_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d1_prime(x, alpha, beta)), ")\n")
print("def d2_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d2_prime(x, alpha, beta)), ")\n")
print("def d3_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d3_prime(x, alpha, beta)), ")\n")
print("def d4_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d4_prime(x, alpha, beta)), ")\n")
print("def d5_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d5_prime(x, alpha, beta)), ")\n")
print("def d6_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d6_prime(x, alpha, beta)), ")\n")
print("def d7_prime_horner(x, alpha, beta) -> float:\n    return (", horner(d7_prime(x, alpha, beta)), ")\n")