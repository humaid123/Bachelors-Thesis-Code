
from math import cos, pi
from scipy.interpolate import BarycentricInterpolator

def get_Chebyshev_nodes(a, b, n):
    res = []
    for k in range(1, n+1):
        res.append(
            (a+b)/2 + (b-a)/2 * cos( (2*k - 1) / (2*n) * pi)
        )
    return res

class HB10ContinuousSolution:
    def __init__(self) -> None:
        self.interps = []
    
    def eval(self, x) -> float:
        for hb in self.interps:
            if (hb.x_i <= x <= hb.x_i_plus_1):
                return hb.eval(x)

        first_hb = self.interps[0]
        if (first_hb.x_i_minus_2 <= x <= first_hb.x_i):
            return first_hb.eval(x)
        print(f"ERROR: {x} is outside of the solution range: {first_hb.x_i_minus_2} <= x <= {self.interps[-1].x_i_plus_1}")
        return -1

    def prime(self, x) -> float:
        for hb in self.interps:
            if (hb.x_i <= x <= hb.x_i_plus_1):
                return hb.prime(x)

        first_hb = self.interps[0]
        if (first_hb.x_i_minus_2 <= x <= first_hb.x_i):
            return first_hb.prime(x)
        
        print(f"ERROR: {x} is outside of the solution range: {first_hb.x_i_minus_2} <= x <= {self.interps[-1].x_i_plus_1}")
        return -1
    
    def append(self, interp) -> None:
        self.interps.append(interp)

    def extend(self, newInterps) -> None:
        self.interps.extend(newInterps)

    def create_error_samplings(self):
        res = []
        for interp in self.interps:
            interp: HB10 = interp 
            res.append(
                (interp.x_i, interp.x_i_plus_1, interp)
            )
        return res


def create_continuous_sol_from_results(res, fn_s, monitor):
    interps = []
    for i in range(len(res) - 4):
        x_i_minus_2, y_i_minus_2     = res[i]    
        x_i_minus_1, y_i_minus_1     = res[i + 1]    
        x_i_minus_0_5, y_i_minus_0_5 = res[i + 2] # I WANT TO CACHE the middle evaluations now 
        x_i, y_i                     = res[i + 3]    
        x_i_plus_1, y_i_plus_1       = res[i + 4]

        f_i_minus_2   = fn_s[i]    
        f_i_minus_1   = fn_s[i + 1]    
        f_i_minus_0_5 = fn_s[i + 2]  # I WANT TO CACHE the middle evaluations now    
        f_i           = fn_s[i + 3]    
        f_i_plus_1    = fn_s[i + 4]
        
        interps.append(
            HB10 (
            x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
            y_i_minus_2, f_i_minus_2,
            y_i_minus_1, f_i_minus_1,
            y_i_minus_0_5, f_i_minus_0_5,
            y_i, f_i,
            y_i_plus_1, f_i_plus_1,
            monitor
            )
        )
    continuous_sol = HB10ContinuousSolution()
    continuous_sol.extend(interps)
    return continuous_sol

def create_defect_samplings(res, fn_s, monitor):
    result = []
    for i in range(len(res) - 4):
        x_i_minus_2, y_i_minus_2     = res[i]    
        x_i_minus_1, y_i_minus_1     = res[i + 1]    
        x_i_minus_0_5, y_i_minus_0_5 = res[i + 2] # I WANT TO CACHE the middle evaluations now 
        x_i, y_i                     = res[i + 3]    
        x_i_plus_1, y_i_plus_1       = res[i + 4]

        f_i_minus_2   = fn_s[i]    
        f_i_minus_1   = fn_s[i + 1]    
        f_i_minus_0_5 = fn_s[i + 2]  # I WANT TO CACHE the middle evaluations now    
        f_i           = fn_s[i + 3]    
        f_i_plus_1    = fn_s[i + 4]
        
        interp = HB10 (
            x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
            y_i_minus_2, f_i_minus_2,
            y_i_minus_1, f_i_minus_1,
            y_i_minus_0_5, f_i_minus_0_5,
            y_i, f_i,
            y_i_plus_1, f_i_plus_1,
            monitor
        )
        result.append( (x_i_minus_1, x_i, x_i_plus_1, interp) )
    return result
        
##########################################################################################################################################
def d0(x, alpha, beta):
    return ( (8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**9) + (9*alpha**4 - 9*alpha**3*beta + 27*alpha**3 - 12*alpha**2*beta**2 - 51*alpha**2*beta + 10*alpha**2 - 24*alpha*beta**2 - 70*alpha*beta - 20*alpha 
- 8*beta**2 - 20*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + (-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 94*alpha**3 + 6*alpha**2*beta**3 - 128*alpha**2*beta - 170*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 72*alpha*beta - 120*alpha + 4*beta**3 + 8*beta**2 - 12*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 
66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + (9*alpha**4*beta**2 + 18*alpha**4*beta - 9*alpha**4 + 7*alpha**3*beta**3 + 57*alpha**3*beta**2 + 111*alpha**3*beta - 11*alpha**3 + 21*alpha**2*beta**3 + 136*alpha**2*beta**2 + 263*alpha**2*beta + 50*alpha**2 + 
18*alpha*beta**3 + 128*alpha*beta**2 + 246*alpha*beta + 84*alpha + 4*beta**3 + 32*beta**2 + 60*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + (36*alpha**4*beta + 36*alpha**4 + 12*alpha**3*beta**2 + 168*alpha**3*beta + 164*alpha**3 - 12*alpha**2*beta**3 + 238*alpha**2*beta + 250*alpha**2 - 24*alpha*beta**3 - 40*alpha*beta**2 + 108*alpha*beta + 144*alpha - 8*beta**3 - 16*beta**2 + 12*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 
+ 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + (-18*alpha**4*beta**2 - 36*alpha**4*beta - 9*alpha**4 - 14*alpha**3*beta**3 - 114*alpha**3*beta**2 - 195*alpha**3*beta - 59*alpha**3 - 42*alpha**2*beta**3 - 236*alpha**2*beta**2 - 373*alpha**2*beta - 130*alpha**2 - 36*alpha*beta**3 - 184*alpha*beta**2 - 282*alpha*beta - 108*alpha - 8*beta**3 - 40*beta**2 - 60*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + (-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 78*alpha**3 + 6*alpha**2*beta**3 - 116*alpha**2*beta - 110*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 48*alpha*beta - 
56*alpha + 4*beta**3 + 8*beta**2 - 4*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 
+ 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + (9*alpha**3*beta**2 + 18*alpha**3*beta + 9*alpha**3 + 7*alpha**2*beta**3 + 48*alpha**2*beta**2 + 75*alpha**2*beta + 34*alpha**2 + 14*alpha*beta**3 + 64*alpha*beta**2 + 86*alpha*beta + 36*alpha + 4*beta**3 + 16*beta**2 + 20*beta + 8)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 + alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 0*(x) + 0 )
def d1(x, alpha, beta):
    return ( 1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (alpha - 2*beta - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (-2*alpha*beta - 2*alpha + beta**2 - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (alpha*beta**2 + 2*alpha*beta - alpha + beta**2 + 6*beta + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 
4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (4*alpha*beta + 4*alpha - 2*beta**2 + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (-2*alpha*beta**2 - 4*alpha*beta - alpha - 2*beta**2 - 6*beta - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 
+ 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + (-2*alpha*beta - 2*alpha + beta**2 - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (beta**2 + 2*beta + 1)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 0*(x) + 0 )
def d2(x, alpha, beta):
    return ( (3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**9) + (3*alpha**2*beta + 8*alpha**2 - 3*alpha*beta**2 - 11*alpha*beta - 7*alpha + 2*beta**2 + 5*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**8) + (3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 9*alpha*beta - 12*alpha - 2*beta**3 - 4*beta**2 + 6*beta + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**7) + (-3*alpha**3*beta**2 - 12*alpha**3*beta - 11*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 13*alpha**2*beta - 8*alpha**2 + 7*alpha*beta**2 + 24*alpha*beta + 15*alpha - beta**3 - 8*beta**2 - 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**6) + (3*alpha**3*beta**3 + 18*alpha**3*beta**2 + 30*alpha**3*beta + 8*alpha**3 + 24*alpha**2*beta**2 + 88*alpha**2*beta + 64*alpha**2 - 6*alpha*beta**3 - 28*alpha*beta**2 - 27*alpha*beta + 4*beta**3 + 8*beta**2 - 6*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**5) + (-alpha**3*beta**3 + 
12*alpha**3*beta + 14*alpha**3 - 6*alpha**2*beta**3 - 28*alpha**2*beta**2 - 35*alpha**2*beta - 8*alpha**2 - 5*alpha*beta**2 - 15*alpha*beta - 9*alpha + 
2*beta**3 + 10*beta**2 + 15*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**4) + (-5*alpha**3*beta**3 - 30*alpha**3*beta**2 - 57*alpha**3*beta - 32*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 15*alpha*beta + 4*alpha - 2*beta**3 - 4*beta**2 + 2*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**3) + (2*alpha**3*beta**3 + 9*alpha**3*beta**2 + 12*alpha**3*beta + 5*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 19*alpha**2*beta + 8*alpha**2 + alpha*beta**2 + 2*alpha*beta + alpha - beta**3 - 4*beta**2 - 5*beta - 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**2) + 0*(x) + 0 ) 
def d3(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**9) + (2*alpha - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + (alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + (-2*alpha**2*beta - 3*alpha**2 + 2*alpha*beta**2 + 4*alpha*beta - 2*alpha + beta**2 + 6*beta + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + (alpha**2*beta**2 
+ 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 8*alpha - 2*beta**2 + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + (-alpha**2*beta**2 + 2*alpha**2 - 4*alpha*beta**2 - 8*alpha*beta - 2*alpha - 2*beta**2 - 6*beta - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + (-alpha**2*beta**2 - 4*alpha**2*beta - 3*alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + (alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 
16*alpha**2)*(x**2) + 0*(x) + 0 )
def d4(x, alpha, beta):
    return ( (2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**9) + (4*alpha**2 - 7*alpha*beta + alpha + 4*beta**2 + beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + (2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 6*alpha - 2*beta**3 + 2*beta**2 + 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 
3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + (-3*alpha**3*beta - 3*alpha**3 + 4*alpha**2*beta**2 - alpha**2*beta - 13*alpha**2 - 3*alpha*beta**3 - alpha*beta**2 + 12*alpha*beta - 6*alpha - 3*beta**3 - 13*beta**2 - 6*beta - 4)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + (-4*alpha**3 + 16*alpha**2*beta + 4*alpha**2 - 16*alpha*beta**2 + 6*alpha + 4*beta**3 - 4*beta**2 - 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + (alpha**3*beta**3 + 3*alpha**3*beta**2 + 9*alpha**3*beta + 7*alpha**3 + 3*alpha**2*beta**3 + alpha**2*beta**2 + 11*alpha**2*beta + 17*alpha**2 + 9*alpha*beta**3 + 11*alpha*beta**2 + 6*alpha*beta + 12*alpha + 7*beta**3 + 17*beta**2 + 12*beta + 6)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + (2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 2*alpha - 2*beta**3 + 2*beta**2 + 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + (-2*alpha**2*beta**2 - 4*alpha**2*beta - 5*alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 6*alpha - 5*beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 0*(x) + 1 )
def d5(x, alpha, beta):
    return ( 1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**9) + (2*alpha - 2*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + (alpha**2 - 4*alpha*beta - 2*alpha + beta**2 - 2*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + (-2*alpha**2*beta - 2*alpha**2 + 2*alpha*beta**2 - 6*alpha + 2*beta**2 + 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 
+ 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**6) + (alpha**2*beta**2 + 2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 + 12*alpha*beta + 6*alpha - beta**2 + 6*beta + 6)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + (4*alpha**2*beta + 4*alpha**2 - 4*alpha*beta**2 + 6*alpha - 4*beta**2 - 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta 
+ 2*alpha + beta**2 + 2*beta + 1)*(x**4) + (-2*alpha**2*beta**2 - 4*alpha**2*beta - alpha**2 - 4*alpha*beta**2 - 12*alpha*beta - 6*alpha - beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + (-2*alpha + 2*beta)/(alpha*beta + alpha + beta + 1)*(x**2) + 1*(x) + 0 )
def d6(x, alpha, beta):
    return ( (-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**9) + (-3*alpha**2*beta + 2*alpha**2 + 3*alpha*beta**2 - 11*alpha*beta + 5*alpha + 8*beta**2 - 7*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**8) + (-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 - 3*alpha*beta**3 + 44*alpha*beta**2 - 9*alpha*beta - 6*alpha - 8*beta**3 + 32*beta**2 + 12*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**7) + (3*alpha**3*beta**2 - alpha**3 - 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 7*alpha**2*beta - 8*alpha**2 - 12*alpha*beta**3 + 13*alpha*beta**2 + 24*alpha*beta - 15*alpha - 11*beta**3 - 8*beta**2 + 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**6) + (-3*alpha**3*beta**3 + 6*alpha**3*beta - 4*alpha**3 - 18*alpha**2*beta**3 - 24*alpha**2*beta**2 + 28*alpha**2*beta - 8*alpha**2 - 30*alpha*beta**3 - 88*alpha*beta**2 + 27*alpha*beta + 6*alpha - 8*beta**3 - 64*beta**2 + 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**5) + (-alpha**3*beta**3 - 6*alpha**3*beta**2 + 2*alpha**3 - 28*alpha**2*beta**2 - 5*alpha**2*beta + 10*alpha**2 + 12*alpha*beta**3 - 35*alpha*beta**2 - 15*alpha*beta + 15*alpha + 
14*beta**3 - 8*beta**2 - 9*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**4) + (5*alpha**3*beta**3 - 3*alpha**3*beta + 2*alpha**3 + 30*alpha**2*beta**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 + 57*alpha*beta**3 + 44*alpha*beta**2 - 15*alpha*beta - 
2*alpha + 32*beta**3 + 32*beta**2 - 4*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**3) + (2*alpha**3*beta**3 
+ 3*alpha**3*beta**2 - alpha**3 + 9*alpha**2*beta**3 + 14*alpha**2*beta**2 + alpha**2*beta - 4*alpha**2 + 12*alpha*beta**3 + 19*alpha*beta**2 + 2*alpha*beta - 5*alpha + 5*beta**3 + 8*beta**2 + beta - 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**2) + 0*(x) + 0 )      
def d7(x, alpha, beta):
    return ( 1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**9) + (2*alpha - 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + (alpha**2 - 4*alpha*beta + beta**2 - 4*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + (-2*alpha**2*beta - alpha**2 + 
2*alpha*beta**2 - 4*alpha*beta - 6*alpha + 3*beta**2 + 2*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + (alpha**2*beta**2 - 2*alpha**2 + 4*alpha*beta**2 + 8*alpha*beta + 2*beta**2 + 8*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + (alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 6*alpha - 2*beta**2 + 2*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + (-alpha**2*beta**2 + alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 3*beta**2 - 4*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + (-alpha**2*beta**2 - 2*alpha**2*beta - alpha**2 - 2*alpha*beta**2 - 4*alpha*beta - 2*alpha - beta**2 - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 0*(x) + 0 )
def d8(x, alpha, beta):
    return ( (-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**9) + (-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 51*alpha*beta**2 - 70*alpha*beta - 20*alpha + 9*beta**4 + 27*beta**3 + 10*beta**2 
- 20*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 128*alpha*beta**2 + 72*alpha*beta + 12*alpha + 18*beta**4 + 94*beta**3 + 170*beta**2 + 120*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + (7*alpha**3*beta**3 + 21*alpha**3*beta**2 + 18*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**4 + 57*alpha**2*beta**3 + 136*alpha**2*beta**2 + 128*alpha**2*beta + 32*alpha**2 + 18*alpha*beta**4 + 111*alpha*beta**3 + 263*alpha*beta**2 + 246*alpha*beta + 60*alpha - 9*beta**4 - 11*beta**3 + 50*beta**2 + 84*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + (12*alpha**3*beta**2 + 24*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**3 + 40*alpha**2*beta + 16*alpha**2 - 36*alpha*beta**4 - 168*alpha*beta**3 - 238*alpha*beta**2 - 108*alpha*beta - 12*alpha - 36*beta**4 - 164*beta**3 - 250*beta**2 - 144*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + (-14*alpha**3*beta**3 - 42*alpha**3*beta**2 - 36*alpha**3*beta - 8*alpha**3 - 18*alpha**2*beta**4 - 114*alpha**2*beta**3 - 236*alpha**2*beta**2 - 184*alpha**2*beta - 40*alpha**2 - 36*alpha*beta**4 - 195*alpha*beta**3 - 373*alpha*beta**2 - 282*alpha*beta - 60*alpha - 9*beta**4 - 59*beta**3 - 130*beta**2 - 108*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + (-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 116*alpha*beta**2 + 48*alpha*beta + 4*alpha + 18*beta**4 + 78*beta**3 + 110*beta**2 + 56*beta + 8)/(alpha**3*beta**9 + 
9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 
33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + (7*alpha**3*beta**2 + 14*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**3 + 48*alpha**2*beta**2 + 64*alpha**2*beta + 16*alpha**2 + 18*alpha*beta**3 + 75*alpha*beta**2 + 86*alpha*beta + 20*alpha + 9*beta**3 + 34*beta**2 + 36*beta + 8)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 
+ 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + beta**11 + 14*beta**10 + 85*beta**9 + 292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)*(x**2) + 0*(x) + 0 )
def d9(x, alpha, beta):
    return ( 1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**9) + (2*alpha - beta + 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 
+ 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + (alpha**2 - 2*alpha*beta - 2*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + (-alpha**2*beta - alpha**2 - 2*alpha*beta - 6*alpha + beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + (-2*alpha**2 + 4*alpha*beta + 4*beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 
+ 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + (2*alpha**2*beta + 2*alpha**2 + 4*alpha*beta + 6*alpha + beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + (alpha**2 - 2*alpha*beta - 2*beta - 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + (-alpha**2 - 2*alpha - 1)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)*(x**2) + 0*(x) + 0 )
def d0_prime(x, alpha, beta):
    return ( 9*(8*alpha**3 + 6*alpha**2*beta + 30*alpha**2 + 12*alpha*beta + 32*alpha + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**8) + 8*(9*alpha**4 - 9*alpha**3*beta + 27*alpha**3 - 12*alpha**2*beta**2 - 51*alpha**2*beta + 10*alpha**2 - 24*alpha*beta**2 - 70*alpha*beta - 20*alpha - 8*beta**2 - 20*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 
+ 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**7) + 7*(-18*alpha**4*beta - 18*alpha**4 - 6*alpha**3*beta**2 - 84*alpha**3*beta - 94*alpha**3 + 6*alpha**2*beta**3 - 128*alpha**2*beta - 170*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 72*alpha*beta - 120*alpha + 4*beta**3 + 8*beta**2 - 12*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**6) + 6*(9*alpha**4*beta**2 + 18*alpha**4*beta - 9*alpha**4 + 7*alpha**3*beta**3 + 57*alpha**3*beta**2 + 111*alpha**3*beta - 11*alpha**3 + 21*alpha**2*beta**3 + 136*alpha**2*beta**2 + 263*alpha**2*beta + 50*alpha**2 + 18*alpha*beta**3 + 128*alpha*beta**2 + 246*alpha*beta + 84*alpha + 4*beta**3 + 32*beta**2 + 60*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**5) + 5*(36*alpha**4*beta + 36*alpha**4 + 12*alpha**3*beta**2 + 168*alpha**3*beta + 164*alpha**3 - 12*alpha**2*beta**3 + 238*alpha**2*beta + 250*alpha**2 - 24*alpha*beta**3 - 40*alpha*beta**2 + 108*alpha*beta + 144*alpha - 8*beta**3 - 16*beta**2 + 12*beta + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**4) + 4*(-18*alpha**4*beta**2 - 36*alpha**4*beta - 9*alpha**4 - 14*alpha**3*beta**3 - 114*alpha**3*beta**2 - 195*alpha**3*beta - 59*alpha**3 - 42*alpha**2*beta**3 - 236*alpha**2*beta**2 - 373*alpha**2*beta - 130*alpha**2 - 36*alpha*beta**3 - 184*alpha*beta**2 - 282*alpha*beta - 108*alpha - 8*beta**3 - 40*beta**2 - 60*beta - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**3) + 3*(-18*alpha**4*beta - 18*alpha**4 
- 6*alpha**3*beta**2 - 84*alpha**3*beta - 78*alpha**3 + 6*alpha**2*beta**3 - 116*alpha**2*beta - 110*alpha**2 + 12*alpha*beta**3 + 20*alpha*beta**2 - 48*alpha*beta - 56*alpha + 4*beta**3 + 8*beta**2 - 4*beta - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x**2) + 2*(9*alpha**3*beta**2 + 18*alpha**3*beta + 9*alpha**3 + 7*alpha**2*beta**3 + 48*alpha**2*beta**2 + 75*alpha**2*beta + 34*alpha**2 + 14*alpha*beta**3 + 64*alpha*beta**2 + 86*alpha*beta + 36*alpha + 4*beta**3 + 16*beta**2 + 20*beta + 8)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 
+ alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)*(x) + 0 )
def d1_prime(x, alpha, beta):
    return ( 9*1/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(alpha - 2*beta - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta 
+ 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(-2*alpha*beta - 2*alpha + beta**2 - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(alpha*beta**2 + 2*alpha*beta - alpha + beta**2 + 6*beta + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(4*alpha*beta + 4*alpha - 2*beta**2 + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 
104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(-2*alpha*beta**2 
- 4*alpha*beta - alpha - 2*beta**2 - 6*beta - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 3*(-2*alpha*beta - 2*alpha + beta**2 - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 
+ alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(beta**2 + 2*beta + 1)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x) + 0 )
def d2_prime(x, alpha, beta):
    return ( 9*(3*alpha*beta + 8*alpha - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**8) + 8*(3*alpha**2*beta + 8*alpha**2 - 3*alpha*beta**2 - 11*alpha*beta - 7*alpha + 2*beta**2 + 5*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**7) + 7*(3*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 9*alpha*beta - 12*alpha - 2*beta**3 - 4*beta**2 + 6*beta + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**6) + 6*(-3*alpha**3*beta**2 - 12*alpha**3*beta - 11*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 13*alpha**2*beta - 8*alpha**2 + 7*alpha*beta**2 + 24*alpha*beta + 15*alpha - beta**3 - 8*beta**2 - 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**5) + 5*(3*alpha**3*beta**3 + 18*alpha**3*beta**2 + 30*alpha**3*beta + 8*alpha**3 + 24*alpha**2*beta**2 + 88*alpha**2*beta + 64*alpha**2 - 6*alpha*beta**3 - 28*alpha*beta**2 - 27*alpha*beta + 4*beta**3 + 8*beta**2 - 6*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**4) + 4*(-alpha**3*beta**3 + 12*alpha**3*beta + 14*alpha**3 - 6*alpha**2*beta**3 - 28*alpha**2*beta**2 - 35*alpha**2*beta - 8*alpha**2 - 5*alpha*beta**2 - 15*alpha*beta 
- 9*alpha + 2*beta**3 + 10*beta**2 + 15*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x**3) + 3*(-5*alpha**3*beta**3 - 30*alpha**3*beta**2 - 57*alpha**3*beta - 32*alpha**3 - 12*alpha**2*beta**2 - 44*alpha**2*beta - 32*alpha**2 + 3*alpha*beta**3 + 14*alpha*beta**2 + 15*alpha*beta + 4*alpha - 2*beta**3 - 4*beta**2 + 2*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)*(x**2) + 2*(2*alpha**3*beta**3 + 9*alpha**3*beta**2 + 12*alpha**3*beta + 5*alpha**3 + 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 19*alpha**2*beta + 8*alpha**2 + alpha*beta**2 + 2*alpha*beta + alpha - beta**3 - 4*beta**2 - 5*beta - 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)*(x) + 0 )
def d3_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**8) + 8*(2*alpha - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**6) + 6*(-2*alpha**2*beta - 3*alpha**2 + 2*alpha*beta**2 + 4*alpha*beta - 2*alpha + beta**2 + 6*beta + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**5) + 5*(alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 8*alpha - 2*beta**2 + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**4) + 4*(-alpha**2*beta**2 + 2*alpha**2 - 4*alpha*beta**2 - 8*alpha*beta - 2*alpha - 2*beta**2 - 6*beta - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**3) + 3*(-alpha**2*beta**2 - 4*alpha**2*beta - 3*alpha**2 - 4*alpha*beta - 4*alpha + beta**2 - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x**2) + 2*(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)*(x) + 0 )
def d4_prime(x, alpha, beta):
    return ( 9*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**8) + 8*(4*alpha**2 - 7*alpha*beta + alpha + 4*beta**2 + beta + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**7) + 7*(2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 6*alpha - 2*beta**3 + 2*beta**2 + 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**6) + 6*(-3*alpha**3*beta - 3*alpha**3 + 4*alpha**2*beta**2 - alpha**2*beta - 13*alpha**2 - 3*alpha*beta**3 - alpha*beta**2 + 12*alpha*beta - 6*alpha - 3*beta**3 - 13*beta**2 - 6*beta - 4)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**5) + 5*(-4*alpha**3 + 16*alpha**2*beta + 4*alpha**2 - 16*alpha*beta**2 + 6*alpha + 4*beta**3 - 4*beta**2 - 6*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**4) + 4*(alpha**3*beta**3 + 3*alpha**3*beta**2 + 9*alpha**3*beta + 7*alpha**3 + 3*alpha**2*beta**3 + alpha**2*beta**2 + 11*alpha**2*beta + 17*alpha**2 + 9*alpha*beta**3 + 11*alpha*beta**2 + 6*alpha*beta + 12*alpha + 7*beta**3 + 17*beta**2 + 12*beta + 6)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**3) + 3*(2*alpha**3 - 8*alpha**2*beta - 2*alpha**2 + 8*alpha*beta**2 - 2*alpha - 2*beta**3 + 2*beta**2 + 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)*(x**2) + 2*(-2*alpha**2*beta**2 - 4*alpha**2*beta - 5*alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 6*alpha - 5*beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x) + 0 )
def d5_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**8) + 8*(2*alpha - 2*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**7) + 7*(alpha**2 - 4*alpha*beta - 2*alpha + beta**2 - 2*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 
1)*(x**6) + 6*(-2*alpha**2*beta - 2*alpha**2 + 2*alpha*beta**2 - 6*alpha + 2*beta**2 + 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**5) + 5*(alpha**2*beta**2 + 2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 + 12*alpha*beta + 6*alpha - beta**2 + 6*beta + 6)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**4) 
+ 4*(4*alpha**2*beta + 4*alpha**2 - 4*alpha*beta**2 + 6*alpha - 4*beta**2 - 6*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**3) + 3*(-2*alpha**2*beta**2 - 4*alpha**2*beta - alpha**2 - 4*alpha*beta**2 - 12*alpha*beta - 6*alpha - beta**2 - 6*beta - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)*(x**2) + 2*(-2*alpha + 2*beta)/(alpha*beta + alpha + beta + 1)*(x) + 1 )
def d6_prime(x, alpha, beta):
    return ( 9*(-3*alpha*beta + 2*alpha - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**8) + 8*(-3*alpha**2*beta + 2*alpha**2 + 3*alpha*beta**2 - 11*alpha*beta + 5*alpha + 8*beta**2 - 7*beta + 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 
16*beta**3)*(x**7) + 7*(-3*alpha**3*beta + 2*alpha**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 - 3*alpha*beta**3 + 44*alpha*beta**2 - 9*alpha*beta - 6*alpha - 8*beta**3 + 32*beta**2 + 12*beta - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**6) + 6*(3*alpha**3*beta**2 - alpha**3 - 3*alpha**2*beta**3 + 14*alpha**2*beta**2 + 7*alpha**2*beta - 8*alpha**2 - 12*alpha*beta**3 + 13*alpha*beta**2 + 24*alpha*beta 
- 15*alpha - 11*beta**3 - 8*beta**2 + 15*beta - 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**5) + 5*(-3*alpha**3*beta**3 + 6*alpha**3*beta - 4*alpha**3 - 18*alpha**2*beta**3 - 24*alpha**2*beta**2 + 28*alpha**2*beta - 8*alpha**2 - 30*alpha*beta**3 - 88*alpha*beta**2 + 27*alpha*beta + 6*alpha - 8*beta**3 - 64*beta**2 + 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**4) + 4*(-alpha**3*beta**3 - 6*alpha**3*beta**2 + 2*alpha**3 - 28*alpha**2*beta**2 - 5*alpha**2*beta + 10*alpha**2 + 12*alpha*beta**3 - 35*alpha*beta**2 - 15*alpha*beta + 15*alpha + 14*beta**3 - 8*beta**2 - 9*beta + 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x**3) + 3*(5*alpha**3*beta**3 - 3*alpha**3*beta + 2*alpha**3 + 30*alpha**2*beta**3 + 12*alpha**2*beta**2 - 14*alpha**2*beta + 4*alpha**2 + 57*alpha*beta**3 + 44*alpha*beta**2 - 15*alpha*beta - 2*alpha + 32*beta**3 + 32*beta**2 - 4*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)*(x**2) + 2*(2*alpha**3*beta**3 + 3*alpha**3*beta**2 - alpha**3 + 9*alpha**2*beta**3 + 14*alpha**2*beta**2 + alpha**2*beta - 4*alpha**2 + 12*alpha*beta**3 + 19*alpha*beta**2 + 2*alpha*beta - 5*alpha + 5*beta**3 + 8*beta**2 + beta - 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)*(x) + 0 ) 
def d7_prime(x, alpha, beta):
    return ( 9*1/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**8) + 8*(2*alpha - 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**7) + 7*(alpha**2 - 4*alpha*beta + beta**2 - 4*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**6) + 6*(-2*alpha**2*beta - alpha**2 + 2*alpha*beta**2 - 4*alpha*beta - 6*alpha + 3*beta**2 + 2*beta - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**5) + 5*(alpha**2*beta**2 - 2*alpha**2 + 4*alpha*beta**2 + 8*alpha*beta + 2*beta**2 + 8*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**4) + 4*(alpha**2*beta**2 + 4*alpha**2*beta + 2*alpha**2 + 8*alpha*beta + 6*alpha - 2*beta**2 + 2*beta + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**3) + 3*(-alpha**2*beta**2 + alpha**2 - 4*alpha*beta**2 - 4*alpha*beta - 3*beta**2 - 4*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x**2) + 
2*(-alpha**2*beta**2 - 2*alpha**2*beta - alpha**2 - 2*alpha*beta**2 - 4*alpha*beta - 2*alpha - beta**2 - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)*(x) + 0 )
def d8_prime(x, alpha, beta):
    return ( 9*(-6*alpha*beta**2 - 12*alpha*beta - 4*alpha - 8*beta**3 - 30*beta**2 - 32*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**8) + 8*(-12*alpha**2*beta**2 - 24*alpha**2*beta - 8*alpha**2 - 9*alpha*beta**3 - 51*alpha*beta**2 - 70*alpha*beta - 20*alpha + 9*beta**4 + 27*beta**3 + 10*beta**2 - 20*beta - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**7) + 7*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 128*alpha*beta**2 + 72*alpha*beta + 12*alpha + 18*beta**4 + 94*beta**3 + 170*beta**2 + 120*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 
+ 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**6) + 6*(7*alpha**3*beta**3 + 21*alpha**3*beta**2 + 18*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**4 + 57*alpha**2*beta**3 + 136*alpha**2*beta**2 + 128*alpha**2*beta + 32*alpha**2 + 18*alpha*beta**4 + 111*alpha*beta**3 + 263*alpha*beta**2 + 
246*alpha*beta + 60*alpha - 9*beta**4 - 11*beta**3 + 50*beta**2 + 84*beta + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**5) + 5*(12*alpha**3*beta**2 + 24*alpha**3*beta + 8*alpha**3 - 12*alpha**2*beta**3 + 40*alpha**2*beta + 16*alpha**2 - 36*alpha*beta**4 - 168*alpha*beta**3 - 238*alpha*beta**2 - 108*alpha*beta - 12*alpha - 36*beta**4 - 164*beta**3 - 250*beta**2 - 144*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**4) + 4*(-14*alpha**3*beta**3 - 42*alpha**3*beta**2 - 36*alpha**3*beta - 8*alpha**3 - 18*alpha**2*beta**4 - 114*alpha**2*beta**3 - 236*alpha**2*beta**2 - 184*alpha**2*beta - 40*alpha**2 - 36*alpha*beta**4 - 195*alpha*beta**3 - 373*alpha*beta**2 - 282*alpha*beta - 60*alpha - 9*beta**4 - 59*beta**3 - 130*beta**2 - 108*beta - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**3) + 3*(-6*alpha**3*beta**2 - 12*alpha**3*beta - 4*alpha**3 + 6*alpha**2*beta**3 - 20*alpha**2*beta - 8*alpha**2 + 18*alpha*beta**4 + 84*alpha*beta**3 + 116*alpha*beta**2 + 48*alpha*beta + 4*alpha + 18*beta**4 + 78*beta**3 + 110*beta**2 + 56*beta + 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)*(x**2) + 2*(7*alpha**3*beta**2 + 14*alpha**3*beta + 4*alpha**3 + 9*alpha**2*beta**3 + 48*alpha**2*beta**2 + 64*alpha**2*beta + 16*alpha**2 + 18*alpha*beta**3 + 75*alpha*beta**2 + 86*alpha*beta + 20*alpha + 9*beta**3 + 34*beta**2 + 36*beta + 8)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 + 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + beta**11 + 14*beta**10 + 85*beta**9 + 
292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)*(x) + 0 )
def d9_prime(x, alpha, beta):
    return ( 9*1/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**8) + 8*(2*alpha - beta + 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**7) + 7*(alpha**2 - 2*alpha*beta - 2*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**6) + 6*(-alpha**2*beta - alpha**2 - 2*alpha*beta - 6*alpha + beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**5) + 5*(-2*alpha**2 + 4*alpha*beta + 4*beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 
+ beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**4) + 4*(2*alpha**2*beta + 2*alpha**2 + 4*alpha*beta + 6*alpha + beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**3) + 3*(alpha**2 - 2*alpha*beta - 2*beta - 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 
+ 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)*(x**2) + 2*(-alpha**2 - 2*alpha - 1)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)*(x) + 0 )
#########################################################################################################

#########################################################################################################
def d0_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(alpha*(8*alpha + 6*beta + 30) + 12*beta + 32) + 4*beta + 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 
+ 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3) + (alpha*(alpha*(alpha*(9*alpha - 9*beta + 27) + beta*(-12*beta - 51) + 10) + beta*(-24*beta - 70) - 20) + beta*(-8*beta - 20) - 8)/(alpha**12 + 
3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 
377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(-18*beta - 18) + beta*(-6*beta - 84) - 94) + beta*(6*beta**2 - 128) - 170) + beta*(beta*(12*beta + 20) - 72) - 120) + beta*(beta*(4*beta + 8) - 12) - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(9*beta + 18) - 9) + beta*(beta*(7*beta + 57) + 111) - 11) + beta*(beta*(21*beta + 136) + 263) + 50) + beta*(beta*(18*beta + 128) + 246) + 84) + beta*(beta*(4*beta + 32) + 60) + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta 
+ 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(36*beta + 36) + beta*(12*beta + 168) + 164) + beta*(238 - 12*beta**2) + 250) + beta*(beta*(-24*beta - 40) + 108) + 144) + beta*(beta*(-8*beta - 16) + 12) + 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 
96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(-18*beta - 36) - 9) + beta*(beta*(-14*beta - 114) - 195) - 59) + beta*(beta*(-42*beta - 236) - 373) - 130) + beta*(beta*(-36*beta - 184) - 282) - 108) + beta*(beta*(-8*beta - 40) - 60) - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(-18*beta - 18) + beta*(-6*beta - 84) - 78) + beta*(6*beta**2 - 116) - 110) + beta*(beta*(12*beta + 20) - 48) - 
56) + beta*(beta*(4*beta + 8) - 4) - 8)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta 
+ 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(beta*(9*beta + 18) + 9) + beta*(beta*(7*beta + 48) + 75) + 34) + beta*(beta*(14*beta + 64) + 86) + 36) + beta*(beta*(4*beta + 16) + 20) + 8)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 + alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 
123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) )

def d1_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (alpha - 2*beta - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta 
+ 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(-2*beta - 2) + beta**2 - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(beta + 2) - 1) + beta*(beta + 6) + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(4*beta + 4) - 2*beta**2 + 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(-2*beta - 4) - 1) + beta*(-2*beta - 6) - 
3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 
16*alpha**2)) + (alpha*(-2*beta - 2) + beta**2 - 1)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (beta*(beta + 2) + 1)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) )

def d2_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(3*beta + 8) - 2*beta - 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3) + (alpha*(alpha*(3*beta + 8) + beta*(-3*beta - 11) - 7) + beta*(2*beta + 5) + 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) + (alpha*(alpha*(alpha*(3*beta + 8) + beta*(-12*beta - 44) - 32) + beta*(beta*(3*beta + 14) + 9) - 12) + beta*(beta*(-2*beta - 4) + 6) + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(-3*beta - 12) - 11) + beta*(beta*(3*beta + 14) + 13) 
- 8) + beta*(7*beta + 24) + 15) + beta*(beta*(-beta - 8) - 15) - 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(3*beta + 18) + 30) + 8) + beta*(24*beta + 88) + 64) + beta*(beta*(-6*beta - 28) - 27)) + beta*(beta*(4*beta + 8) - 6) - 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(12 - beta**2) + 14) + beta*(beta*(-6*beta - 
28) - 35) - 8) + beta*(-5*beta - 15) - 9) + beta*(beta*(2*beta + 10) + 15) + 6)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(-5*beta - 30) - 57) - 32) + beta*(-12*beta - 44) - 32) + beta*(beta*(3*beta + 14) + 15) + 4) + beta*(beta*(-2*beta - 4) + 2) + 4)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(2*beta + 9) + 12) + 
5) + beta*(beta*(3*beta + 14) + 19) + 8) + beta*(beta + 2) + 1) + beta*(beta*(-beta - 4) - 5) - 2)/(2*alpha**3*beta**3 + 12*alpha**3*beta**2 + 24*alpha**3*beta + 16*alpha**3)) )

def d3_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (2*alpha - 2*beta - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha - 4*beta - 4) + beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(-2*beta - 3) + beta*(2*beta + 4) - 2) + beta*(beta + 6) + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(beta + 4) + 2) + 8*beta + 8) - 2*beta**2 + 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(2 - beta**2) + beta*(-4*beta - 8) - 2) + beta*(-2*beta - 6) - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(-beta - 4) - 3) - 4*beta - 4) + beta**2 - 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(beta + 2) + 1) + beta*(2*beta + 4) + 2) + beta*(beta + 2) + 1)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) )

def d4_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(2*alpha - 2*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1) + (alpha*(4*alpha - 7*beta + 1) + beta*(4*beta + 1) + 1)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(2*alpha - 8*beta - 2) + 8*beta**2 - 6) + beta*(beta*(2 - 2*beta) + 6))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(-3*beta - 3) + beta*(4*beta - 1) - 13) + beta*(beta*(-3*beta - 1) + 12) - 6) + beta*(beta*(-3*beta - 13) - 6) - 4)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(-4*alpha + 16*beta + 4) - 16*beta**2 + 6) + beta*(beta*(4*beta - 4) - 6))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(beta*(beta*(beta + 3) + 9) + 7) + beta*(beta*(3*beta + 1) + 11) + 17) + beta*(beta*(9*beta + 11) + 6) + 12) + beta*(beta*(7*beta + 17) + 12) + 6)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 
9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(2*alpha - 8*beta - 2) + 8*beta**2 - 2) + beta*(beta*(2 - 2*beta) + 2))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(beta*(-2*beta - 4) - 5) + beta*(-4*beta - 4) - 6) + 
beta*(-5*beta - 6) - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + 1 )        

def d5_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(x/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1) + (2*alpha - 2*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha - 4*beta - 2) + beta*(beta - 2) - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(-2*beta - 2) + 2*beta**2 - 6) + beta*(2*beta + 6))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(beta + 2) - 1) + beta*(2*beta + 12) + 6) + beta*(6 - beta) + 6)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(4*beta + 4) - 4*beta**2 + 6) + beta*(-4*beta - 6))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(-2*beta - 4) - 1) + beta*(-4*beta - 12) - 6) + beta*(-beta - 6) - 4)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (-2*alpha + 2*beta)/(alpha*beta + alpha + beta + 1)) + 1) )

def d6_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(2 - 3*beta) - 8*beta + 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3) + (alpha*(alpha*(2 - 3*beta) + beta*(3*beta - 11) + 5) + beta*(8*beta - 7) + 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)) 
+ (alpha*(alpha*(alpha*(2 - 3*beta) + beta*(12*beta - 14) + 4) + beta*(beta*(44 - 3*beta) - 9) - 6) + beta*(beta*(32 - 8*beta) + 12) - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(3*beta**2 - 1) + beta*(beta*(14 - 3*beta) + 7) - 8) + beta*(beta*(13 - 12*beta) + 24) - 15) + beta*(beta*(-11*beta - 8) + 15) - 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)) + (alpha*(alpha*(alpha*(beta*(6 - 3*beta**2) - 4) + beta*(beta*(-18*beta - 24) + 28) - 8) + beta*(beta*(-30*beta - 88) + 27) + 6) + beta**2*(-8*beta - 64) + 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta**2*(-beta - 6) + 2) + beta*(-28*beta - 5) + 10) 
+ beta*(beta*(12*beta - 35) - 15) + 15) + beta*(beta*(14*beta - 8) - 9) + 6)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)) + (alpha*(alpha*(alpha*(beta*(5*beta**2 - 3) + 2) + beta*(beta*(30*beta + 12) - 14) + 4) + beta*(beta*(57*beta + 44) - 15) - 2) + beta*(beta*(32*beta + 32) - 4) - 4)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta**2*(2*beta + 3) - 1) + beta*(beta*(9*beta + 14) + 1) - 4) + beta*(beta*(12*beta + 19) + 2) - 5) + beta*(beta*(5*beta + 8) + 1) - 2)/(2*alpha**3*beta**3 + 12*alpha**2*beta**3 + 24*alpha*beta**3 + 16*beta**3)) )

def d7_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2) + (2*alpha - 2*beta + 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha - 4*beta) + beta*(beta - 4) - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(-2*beta - 1) 
+ beta*(2*beta - 4) - 6) + beta*(3*beta + 2) - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta**2 - 2) + beta*(4*beta + 8)) + beta*(2*beta + 8) + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(beta + 4) + 2) + 8*beta + 6) + beta*(2 - 2*beta) + 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(1 - beta**2) + beta*(-4*beta - 4)) + beta*(-3*beta - 4) - 1)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(-beta - 2) - 1) + beta*(-2*beta - 4) - 2) + beta*(-beta - 2) - 1)/(4*alpha**2*beta**2 + 
16*alpha*beta**2 + 16*beta**2)) )

def d8_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x*(alpha*(beta*(-6*beta - 12) - 4) + beta*(beta*(-8*beta - 30) - 32) - 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 
33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3) + (alpha*(alpha*(beta*(-12*beta - 24) - 8) + beta*(beta*(-9*beta - 51) - 70) - 20) + beta*(beta*(beta*(9*beta + 27) + 10) - 20) - 8)/(alpha**3*beta**9 
+ 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 
+ 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-6*beta - 12) - 4) + beta*(6*beta**2 - 20) - 8) + beta*(beta*(beta*(18*beta + 84) + 128) + 72) + 
12) + beta*(beta*(beta*(18*beta + 94) + 170) + 120) + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(7*beta + 21) + 
18) + 4) + beta*(beta*(beta*(9*beta + 57) + 136) + 128) + 32) + beta*(beta*(beta*(18*beta + 111) + 263) + 246) + 60) + beta*(beta*(beta*(-9*beta - 11) + 50) + 84) + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(12*beta + 24) + 8) + beta*(40 - 12*beta**2) + 16) + beta*(beta*(beta*(-36*beta - 168) - 238) - 108) - 12) + beta*(beta*(beta*(-36*beta - 164) - 250) - 144) - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(-14*beta - 42) - 36) - 8) + beta*(beta*(beta*(-18*beta - 114) - 236) - 184) - 40) + beta*(beta*(beta*(-36*beta - 195) - 373) 
- 282) - 60) + beta*(beta*(beta*(-9*beta - 59) - 130) - 108) - 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 
66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-6*beta - 12) - 4) + beta*(6*beta**2 - 20) - 8) + beta*(beta*(beta*(18*beta + 84) + 116) + 48) + 4) + beta*(beta*(beta*(18*beta + 78) + 110) + 56) + 8)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(7*beta + 14) + 4) + beta*(beta*(9*beta + 48) + 64) + 16) + beta*(beta*(18*beta + 75) + 86) 
+ 20) + beta*(beta*(9*beta + 34) + 36) + 8)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 + 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + beta**11 + 14*beta**10 + 85*beta**9 + 292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)) )
def d9_horner(x, alpha, beta) -> float:
    return ( x**2*(x*(x*(x*(x*(x*(x*(x/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2) + (2*alpha - beta + 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha - 2*beta) - 2*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(-beta - 1) - 2*beta - 
6) + beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-2*alpha + 4*beta) + 4*beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 
41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(2*beta + 2) + 4*beta + 6) + beta + 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha - 2*beta) - 2*beta - 1)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-alpha - 2) - 1)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)) )        

def d0_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(alpha*(72*alpha + 54*beta + 270) + 108*beta + 288) + 36*beta + 72)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3) + (alpha*(alpha*(alpha*(72*alpha - 72*beta + 216) + beta*(-96*beta - 408) + 80) + beta*(-192*beta - 560) - 160) + beta*(-64*beta - 160) - 64)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(-126*beta - 126) + beta*(-42*beta - 588) - 658) + beta*(42*beta**2 
- 896) - 1190) + beta*(beta*(84*beta + 140) - 504) - 840) + beta*(beta*(28*beta + 56) - 84) - 168)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) 
+ (alpha*(alpha*(alpha*(alpha*(beta*(54*beta + 108) - 54) + beta*(beta*(42*beta + 342) + 666) - 66) + beta*(beta*(126*beta + 816) + 1578) + 300) + beta*(beta*(108*beta + 768) + 1476) + 504) + beta*(beta*(24*beta + 192) + 360) + 144)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 
240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(180*beta + 180) + beta*(60*beta + 840) + 820) + beta*(1190 - 60*beta**2) + 1250) + beta*(beta*(-120*beta - 200) + 540) + 720) + beta*(beta*(-40*beta - 80) + 60) + 120)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 
33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(beta*(-72*beta - 144) - 36) + beta*(beta*(-56*beta - 456) - 780) - 236) + beta*(beta*(-168*beta - 944) - 1492) - 520) + beta*(beta*(-144*beta - 736) - 1128) - 432) + beta*(beta*(-32*beta - 160) - 240) - 96)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(alpha*(-54*beta - 54) + beta*(-18*beta - 252) - 234) + beta*(18*beta**2 - 348) - 330) + beta*(beta*(36*beta + 60) - 144) - 168) + beta*(beta*(12*beta + 24) - 12) - 24)/(alpha**12 + 3*alpha**11*beta + 15*alpha**11 + 3*alpha**10*beta**2 + 39*alpha**10*beta + 99*alpha**10 + alpha**9*beta**3 + 33*alpha**9*beta**2 + 219*alpha**9*beta + 377*alpha**9 + 9*alpha**8*beta**3 + 153*alpha**8*beta**2 + 693*alpha**8*beta + 912*alpha**8 + 33*alpha**7*beta**3 + 387*alpha**7*beta**2 + 1350*alpha**7*beta + 1452*alpha**7 + 63*alpha**6*beta**3 + 576*alpha**6*beta**2 + 1656*alpha**6*beta + 1520*alpha**6 + 66*alpha**5*beta**3 + 504*alpha**5*beta**2 + 1248*alpha**5*beta + 1008*alpha**5 + 36*alpha**4*beta**3 + 240*alpha**4*beta**2 + 528*alpha**4*beta + 384*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) + (alpha*(alpha*(alpha*(beta*(18*beta + 36) + 18) + beta*(beta*(14*beta + 96) + 150) + 68) + beta*(beta*(28*beta + 128) + 172) + 72) + beta*(beta*(8*beta + 32) + 40) + 16)/(alpha**11 + 3*alpha**10*beta + 14*alpha**10 + 3*alpha**9*beta**2 + 36*alpha**9*beta + 85*alpha**9 + alpha**8*beta**3 + 30*alpha**8*beta**2 + 183*alpha**8*beta + 292*alpha**8 + 8*alpha**7*beta**3 + 123*alpha**7*beta**2 + 510*alpha**7*beta + 620*alpha**7 + 25*alpha**6*beta**3 + 264*alpha**6*beta**2 + 840*alpha**6*beta + 832*alpha**6 + 38*alpha**5*beta**3 + 312*alpha**5*beta**2 + 816*alpha**5*beta + 688*alpha**5 + 28*alpha**4*beta**3 + 192*alpha**4*beta**2 + 432*alpha**4*beta + 320*alpha**4 + 8*alpha**3*beta**3 + 48*alpha**3*beta**2 + 96*alpha**3*beta + 64*alpha**3)) )     

def d1_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (8*alpha - 16*beta - 8)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(-14*beta - 14) + 7*beta**2 - 21)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(6*beta + 12) - 6) + beta*(6*beta + 36) + 18)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(20*beta + 20) - 10*beta**2 + 15)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(beta*(-8*beta - 16) - 4) + beta*(-8*beta - 24) - 12)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 
+ 16*alpha**2*beta + 16*alpha**2)) + (alpha*(-6*beta - 6) + 3*beta**2 - 3)/(alpha**8 + 2*alpha**7*beta + 10*alpha**7 + alpha**6*beta**2 + 16*alpha**6*beta + 41*alpha**6 + 6*alpha**5*beta**2 + 50*alpha**5*beta + 88*alpha**5 + 13*alpha**4*beta**2 + 76*alpha**4*beta + 104*alpha**4 + 12*alpha**3*beta**2 + 56*alpha**3*beta + 64*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (beta*(2*beta + 4) + 2)/(alpha**7 + 2*alpha**6*beta + 9*alpha**6 + alpha**5*beta**2 + 14*alpha**5*beta + 32*alpha**5 + 5*alpha**4*beta**2 + 36*alpha**4*beta + 56*alpha**4 + 8*alpha**3*beta**2 + 40*alpha**3*beta + 48*alpha**3 + 4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) )

def d2_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(27*beta + 72) - 18*beta - 36)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3) + 
(alpha*(alpha*(12*beta + 32) + beta*(-12*beta - 44) - 28) + beta*(8*beta + 20) + 8)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) + (alpha*(alpha*(alpha*(21*beta + 56) + beta*(-84*beta - 308) - 224) + beta*(beta*(21*beta + 98) + 63) - 84) + beta*(beta*(-14*beta - 28) + 42) + 84)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(-9*beta - 36) - 33) + beta*(beta*(9*beta + 42) + 39) - 24) + beta*(21*beta + 72) + 45) + beta*(beta*(-3*beta - 24) - 45) - 18)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(15*beta + 90) + 150) + 40) + beta*(120*beta + 440) + 320) + beta*(beta*(-30*beta - 140) - 135)) + beta*(beta*(20*beta + 40) - 30) - 60)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(24 - 2*beta**2) + 28) + beta*(beta*(-12*beta - 56) - 70) - 16) + beta*(-10*beta - 30) - 18) + beta*(beta*(4*beta + 20) + 30) + 12)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(-15*beta - 90) - 171) - 96) + beta*(-36*beta - 132) - 96) + beta*(beta*(9*beta + 42) + 45) + 12) + beta*(beta*(-6*beta - 12) + 6) + 12)/(4*alpha**3*beta**3 + 24*alpha**3*beta**2 + 48*alpha**3*beta + 32*alpha**3)) + (alpha*(alpha*(alpha*(beta*(beta*(2*beta + 9) + 12) + 5) + beta*(beta*(3*beta + 14) + 19) + 8) + beta*(beta + 2) + 1) + beta*(beta*(-beta - 4) - 5) - 2)/(alpha**3*beta**3 + 6*alpha**3*beta**2 + 12*alpha**3*beta + 8*alpha**3)) )

def d3_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2) + (4*alpha - 4*beta - 2)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) + (alpha*(7*alpha - 28*beta - 28) + 7*beta**2 - 21)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(-6*beta - 9) + beta*(6*beta + 12) - 6) + beta*(3*beta + 18) + 9)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) + (alpha*(alpha*(beta*(5*beta + 20) + 10) + 40*beta + 40) - 10*beta**2 + 15)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(2 - beta**2) + beta*(-4*beta - 8) - 2) + beta*(-2*beta - 6) - 3)/(alpha**2*beta**2 + 4*alpha**2*beta + 4*alpha**2)) + (alpha*(alpha*(beta*(-3*beta - 12) - 9) - 12*beta - 12) + 3*beta**2 - 3)/(4*alpha**2*beta**2 + 16*alpha**2*beta + 16*alpha**2)) + (alpha*(alpha*(beta*(beta + 2) + 1) + beta*(2*beta + 4) + 2) + beta*(beta + 2) + 1)/(2*alpha**2*beta**2 + 8*alpha**2*beta + 8*alpha**2)) )

def d4_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(18*alpha - 18*beta)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1) + (alpha*(32*alpha - 56*beta + 8) + beta*(32*beta + 8) + 8)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(14*alpha - 56*beta - 14) + 56*beta**2 - 42) + beta*(beta*(14 - 14*beta) + 42))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 
3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(-18*beta - 18) + beta*(24*beta - 6) - 78) + beta*(beta*(-18*beta - 6) + 72) - 36) + beta*(beta*(-18*beta - 78) 
- 36) - 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(-20*alpha + 80*beta + 20) - 80*beta**2 + 30) + beta*(beta*(20*beta - 20) - 30))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(alpha*(beta*(beta*(4*beta + 12) + 36) + 28) + beta*(beta*(12*beta + 4) + 44) + 68) + beta*(beta*(36*beta + 44) + 24) + 48) + beta*(beta*(28*beta + 68) + 48) + 24)/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(6*alpha - 24*beta - 6) + 24*beta**2 - 6) 
+ beta*(beta*(6 - 6*beta) + 6))/(alpha**3*beta**3 + 3*alpha**3*beta**2 + 3*alpha**3*beta + alpha**3 + 3*alpha**2*beta**3 + 9*alpha**2*beta**2 + 9*alpha**2*beta + 3*alpha**2 + 3*alpha*beta**3 + 9*alpha*beta**2 + 9*alpha*beta + 3*alpha + beta**3 + 3*beta**2 + 3*beta + 1)) + (alpha*(alpha*(beta*(-4*beta - 
8) - 10) + beta*(-8*beta - 8) - 12) + beta*(-10*beta - 12) - 8)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) )

def d5_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1) 
+ (16*alpha - 16*beta)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(7*alpha - 28*beta - 14) + beta*(7*beta - 14) - 28)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(-12*beta - 12) + 12*beta**2 - 36) + beta*(12*beta + 36))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(5*beta + 10) - 5) + beta*(10*beta + 60) + 30) + beta*(30 - 5*beta) + 30)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(16*beta + 16) - 16*beta**2 + 
24) + beta*(-16*beta - 24))/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (alpha*(alpha*(beta*(-6*beta - 12) - 3) + beta*(-12*beta - 36) - 18) + beta*(-3*beta - 18) - 12)/(alpha**2*beta**2 + 2*alpha**2*beta + alpha**2 + 2*alpha*beta**2 + 4*alpha*beta + 2*alpha + beta**2 + 2*beta + 1)) + (-4*alpha + 4*beta)/(alpha*beta + alpha + beta + 1)) + 1 )

def d6_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(18 - 27*beta) - 72*beta + 36)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3) + (alpha*(alpha*(8 - 12*beta) + beta*(12*beta - 44) + 20) + beta*(32*beta - 28) + 8)/(alpha**3*beta**3 + 6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) + (alpha*(alpha*(alpha*(14 - 21*beta) + beta*(84*beta - 98) + 28) + beta*(beta*(308 - 21*beta) - 63) - 42) + beta*(beta*(224 - 56*beta) + 84) - 84)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(9*beta**2 - 3) + beta*(beta*(42 - 9*beta) + 21) - 24) 
+ beta*(beta*(39 - 36*beta) + 72) - 45) + beta*(beta*(-33*beta - 24) + 45) - 18)/(alpha**3*beta**3 + 6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) + (alpha*(alpha*(alpha*(beta*(30 - 15*beta**2) - 20) + beta*(beta*(-90*beta - 120) + 140) - 40) + beta*(beta*(-150*beta - 440) + 135) + 30) + beta**2*(-40*beta - 320) + 60)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta**2*(-2*beta - 12) + 4) + 
beta*(-56*beta - 10) + 20) + beta*(beta*(24*beta - 70) - 30) + 30) + beta*(beta*(28*beta - 16) - 18) + 12)/(alpha**3*beta**3 + 6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) + (alpha*(alpha*(alpha*(beta*(15*beta**2 - 9) + 6) + beta*(beta*(90*beta + 36) - 42) + 12) + beta*(beta*(171*beta + 132) - 45) - 6) + beta*(beta*(96*beta + 96) - 12) - 12)/(4*alpha**3*beta**3 + 24*alpha**2*beta**3 + 48*alpha*beta**3 + 32*beta**3)) + (alpha*(alpha*(alpha*(beta**2*(2*beta + 3) - 1) + beta*(beta*(9*beta + 14) + 1) - 4) + beta*(beta*(12*beta + 19) + 2) - 5) + beta*(beta*(5*beta + 8) + 1) - 2)/(alpha**3*beta**3 + 
6*alpha**2*beta**3 + 12*alpha*beta**3 + 8*beta**3)) )

def d7_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2) + (4*alpha - 4*beta + 2)/(alpha**2*beta**2 + 4*alpha*beta**2 
+ 4*beta**2)) + (alpha*(7*alpha - 28*beta) + beta*(7*beta - 28) - 21)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(-6*beta - 3) + beta*(6*beta - 12) - 18) + beta*(9*beta + 6) - 9)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)) + (alpha*(alpha*(5*beta**2 - 10) + beta*(20*beta + 40)) + beta*(10*beta + 40) + 15)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(beta + 4) + 2) + 8*beta + 6) + beta*(2 - 2*beta) + 3)/(alpha**2*beta**2 + 4*alpha*beta**2 + 4*beta**2)) + (alpha*(alpha*(3 - 3*beta**2) + beta*(-12*beta - 12)) + beta*(-9*beta - 12) - 3)/(4*alpha**2*beta**2 + 16*alpha*beta**2 + 16*beta**2)) + (alpha*(alpha*(beta*(-beta - 2) - 1) + beta*(-2*beta - 4) - 2) + beta*(-beta - 2) - 1)/(2*alpha**2*beta**2 + 8*alpha*beta**2 + 8*beta**2)) )

def d8_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(x*(alpha*(beta*(-54*beta - 108) - 36) + beta*(beta*(-72*beta - 270) - 288) - 72)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 
96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3) + (alpha*(alpha*(beta*(-96*beta - 192) - 64) + beta*(beta*(-72*beta - 408) - 560) - 160) + beta*(beta*(beta*(72*beta + 216) + 80) - 160) - 64)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-42*beta - 84) - 28) + beta*(42*beta**2 - 140) - 56) + beta*(beta*(beta*(126*beta + 588) + 896) + 504) + 84) + beta*(beta*(beta*(126*beta + 658) + 1190) + 840) + 168)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(42*beta + 126) + 108) + 24) + beta*(beta*(beta*(54*beta + 342) + 816) + 768) + 192) + beta*(beta*(beta*(108*beta + 666) + 1578) + 1476) + 360) + beta*(beta*(beta*(-54*beta - 66) + 300) + 504) + 144)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(60*beta + 120) + 40) 
+ beta*(200 - 60*beta**2) + 80) + beta*(beta*(beta*(-180*beta - 840) - 1190) - 540) - 60) + beta*(beta*(beta*(-180*beta - 820) - 1250) - 720) - 120)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 
+ 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(beta*(-56*beta - 168) - 144) - 32) + beta*(beta*(beta*(-72*beta - 456) - 944) - 736) - 160) + beta*(beta*(beta*(-144*beta - 780) - 1492) - 1128) - 240) + beta*(beta*(beta*(-36*beta - 236) - 520) - 432) - 96)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(-18*beta - 36) - 12) + beta*(18*beta**2 - 60) - 24) + beta*(beta*(beta*(54*beta + 252) + 348) + 144) + 12) + beta*(beta*(beta*(54*beta + 234) + 330) + 168) + 24)/(alpha**3*beta**9 + 9*alpha**3*beta**8 + 33*alpha**3*beta**7 + 63*alpha**3*beta**6 + 66*alpha**3*beta**5 + 36*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**10 + 33*alpha**2*beta**9 + 153*alpha**2*beta**8 + 387*alpha**2*beta**7 + 576*alpha**2*beta**6 + 504*alpha**2*beta**5 + 240*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**11 + 39*alpha*beta**10 + 219*alpha*beta**9 + 693*alpha*beta**8 + 1350*alpha*beta**7 + 1656*alpha*beta**6 + 1248*alpha*beta**5 + 528*alpha*beta**4 + 96*alpha*beta**3 + beta**12 + 15*beta**11 + 99*beta**10 + 
377*beta**9 + 912*beta**8 + 1452*beta**7 + 1520*beta**6 + 1008*beta**5 + 384*beta**4 + 64*beta**3)) + (alpha*(alpha*(alpha*(beta*(14*beta + 28) + 8) + beta*(beta*(18*beta + 96) + 128) + 32) + beta*(beta*(36*beta + 150) + 172) + 40) + beta*(beta*(18*beta + 68) + 72) + 16)/(alpha**3*beta**8 + 8*alpha**3*beta**7 + 25*alpha**3*beta**6 + 38*alpha**3*beta**5 + 28*alpha**3*beta**4 + 8*alpha**3*beta**3 + 3*alpha**2*beta**9 + 30*alpha**2*beta**8 + 123*alpha**2*beta**7 + 264*alpha**2*beta**6 + 312*alpha**2*beta**5 + 192*alpha**2*beta**4 + 48*alpha**2*beta**3 + 3*alpha*beta**10 + 36*alpha*beta**9 + 183*alpha*beta**8 + 510*alpha*beta**7 + 840*alpha*beta**6 + 816*alpha*beta**5 + 432*alpha*beta**4 + 96*alpha*beta**3 + beta**11 + 14*beta**10 + 85*beta**9 + 292*beta**8 + 620*beta**7 + 832*beta**6 + 688*beta**5 + 320*beta**4 + 64*beta**3)) )

def d9_prime_horner(x, alpha, beta) -> float:
    return ( x*(x*(x*(x*(x*(x*(x*(9*x/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 
+ 104*beta**4 + 64*beta**3 + 16*beta**2) + (16*alpha - 8*beta + 8)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 
4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(7*alpha - 14*beta) - 14*beta - 21)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(-6*beta - 6) - 
12*beta - 36) + 6*beta - 18)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-10*alpha + 20*beta) + 20*beta + 15)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(alpha*(8*beta + 8) + 16*beta + 24) + 4*beta + 12)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 
+ 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 + 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(3*alpha - 6*beta) - 6*beta - 3)/(alpha**2*beta**6 + 6*alpha**2*beta**5 + 13*alpha**2*beta**4 + 12*alpha**2*beta**3 + 4*alpha**2*beta**2 + 2*alpha*beta**7 + 16*alpha*beta**6 + 50*alpha*beta**5 + 76*alpha*beta**4 + 56*alpha*beta**3 + 16*alpha*beta**2 + beta**8 + 10*beta**7 + 41*beta**6 + 88*beta**5 
+ 104*beta**4 + 64*beta**3 + 16*beta**2)) + (alpha*(-2*alpha - 4) - 2)/(alpha**2*beta**5 + 5*alpha**2*beta**4 + 8*alpha**2*beta**3 + 4*alpha**2*beta**2 
+ 2*alpha*beta**6 + 14*alpha*beta**5 + 36*alpha*beta**4 + 40*alpha*beta**3 + 16*alpha*beta**2 + beta**7 + 9*beta**6 + 32*beta**5 + 56*beta**4 + 48*beta**3 + 16*beta**2)) )
#########################################################################################################

# I use a class to represent the Hermite Birkhoff interpolant
# we will have an instance of this class on each step
class HB10:
    def __init__(   
        self, 
        x_i_minus_2, x_i_minus_1, x_i_minus_0_5, x_i, x_i_plus_1,
        y_i_minus_2, f_i_minus_2,
        y_i_minus_1, f_i_minus_1,
        y_i_minus_0_5, f_i_minus_0_5,
        y_i, f_i,
        y_i_plus_1, f_i_plus_1,
        monitor
    ):
        h_i = x_i - x_i_minus_0_5
        h_i_minus_1 = x_i_minus_1 - x_i_minus_2
        h_i_plus_1 = x_i_plus_1 - x_i
        
        self.alpha = h_i_minus_1 / h_i
        self.beta = h_i_plus_1 / h_i

        monitor.different_values_alpha.add(self.alpha)
        monitor.different_values_beta.add(self.beta)

        self.h_i = h_i
        self.x_i = x_i

        # we also store x_i_minus_1 and x_i_plus_1 so that we can build the final interpolant
        self.x_i_plus_1 = x_i_plus_1
        self.x_i_minus_0_5 = x_i_minus_0_5
        self.x_i_minus_1 = x_i_minus_1
        self.x_i_minus_2 = x_i_minus_2

        self.y_i_minus_2 = y_i_minus_2 
        self.f_i_minus_2 = f_i_minus_2

        self.y_i_minus_1 = y_i_minus_1 
        self.f_i_minus_1 = f_i_minus_1
        
        self.y_i_minus_0_5 = y_i_minus_0_5 
        self.f_i_minus_0_5 = f_i_minus_0_5

        self.y_i = y_i
        self.f_i = f_i

        self.y_i_plus_1 = y_i_plus_1
        self.f_i_plus_1 = f_i_plus_1

        xs = get_Chebyshev_nodes(x_i_minus_2, x_i_plus_1, 10)
        ys = [self.eval(x) for x in xs]
        self.eval_bary_interp = BarycentricInterpolator(xs, ys)

        y_primes = [self.prime(x) for x in xs]
        self.prime_bary_interp = BarycentricInterpolator(xs, y_primes) 

    def eval(self, x):
        pheta = (x - self.x_i_minus_0_5) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i_minus_0_5) / h_i
        return (  
                             d0(pheta, self.alpha, self.beta) * self.y_i_minus_2 
                + self.h_i * d1(pheta, self.alpha, self.beta) * self.f_i_minus_2

                           + d2(pheta, self.alpha, self.beta) * self.y_i_minus_1 
                + self.h_i * d3(pheta, self.alpha, self.beta) * self.f_i_minus_1

                           + d4(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 
                + self.h_i * d5(pheta, self.alpha, self.beta) * self.f_i_minus_0_5
                
                           + d6(pheta, self.alpha, self.beta) * self.y_i         
                + self.h_i * d7(pheta, self.alpha, self.beta) * self.f_i 
                
                           + d8(pheta, self.alpha, self.beta) * self.y_i_plus_1  
                + self.h_i * d9(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def prime(self, x):
        pheta = (x - self.x_i_minus_0_5) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i_minus_0_5) / h_i
        return (  
              d0_prime(pheta, self.alpha, self.beta) * self.y_i_minus_2 / self.h_i 
            + d1_prime(pheta, self.alpha, self.beta) * self.f_i_minus_2

            + d2_prime(pheta, self.alpha, self.beta) * self.y_i_minus_1 / self.h_i 
            + d3_prime(pheta, self.alpha, self.beta) * self.f_i_minus_1

            + d4_prime(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 / self.h_i 
            + d5_prime(pheta, self.alpha, self.beta) * self.f_i_minus_0_5

            + d6_prime(pheta, self.alpha, self.beta) * self.y_i         / self.h_i 
            + d7_prime(pheta, self.alpha, self.beta) * self.f_i 

            + d8_prime(pheta, self.alpha, self.beta) * self.y_i_plus_1  / self.h_i 
            + d9_prime(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def eval_horner(self, x):
        pheta = (x - self.x_i_minus_0_5) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i_minus_0_5) / h_i
        return (  
                             d0_horner(pheta, self.alpha, self.beta) * self.y_i_minus_2 
                + self.h_i * d1_horner(pheta, self.alpha, self.beta) * self.f_i_minus_2

                           + d2_horner(pheta, self.alpha, self.beta) * self.y_i_minus_1 
                + self.h_i * d3_horner(pheta, self.alpha, self.beta) * self.f_i_minus_1

                           + d4_horner(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 
                + self.h_i * d5_horner(pheta, self.alpha, self.beta) * self.f_i_minus_0_5
                
                           + d6_horner(pheta, self.alpha, self.beta) * self.y_i         
                + self.h_i * d7_horner(pheta, self.alpha, self.beta) * self.f_i 
                
                           + d8_horner(pheta, self.alpha, self.beta) * self.y_i_plus_1  
                + self.h_i * d9_horner(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )

    def prime_horner(self, x):
        pheta = (x - self.x_i_minus_0_5) / self.h_i  # x = t_i + pheta*h_i so pheta = (x - t_i_minus_0_5) / h_i
        return (  
              d0_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_2 / self.h_i 
            + d1_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_2

            + d2_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_1 / self.h_i 
            + d3_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_1

            + d4_prime_horner(pheta, self.alpha, self.beta) * self.y_i_minus_0_5 / self.h_i 
            + d5_prime_horner(pheta, self.alpha, self.beta) * self.f_i_minus_0_5

            + d6_prime_horner(pheta, self.alpha, self.beta) * self.y_i         / self.h_i 
            + d7_prime_horner(pheta, self.alpha, self.beta) * self.f_i 

            + d8_prime_horner(pheta, self.alpha, self.beta) * self.y_i_plus_1  / self.h_i 
            + d9_prime_horner(pheta, self.alpha, self.beta) * self.f_i_plus_1
        )
    
    def eval_bary(self, x) -> float:
        return self.eval_bary_interp(x)

    def prime_bary(self, x) -> float:
        return self.prime_bary_interp(x)